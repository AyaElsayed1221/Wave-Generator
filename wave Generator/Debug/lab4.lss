
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001156  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00001156  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001610  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087a  00000000  00000000  00002881  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fe  00000000  00000000  000030fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  000037fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000223  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000766  00000000  00000000  00003c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000043c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000ff4  00000ff4  00001108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000044a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000000c  00000fae  00000fae  000010c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_11 0000007c  0000096c  0000096c  00000a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_13 00000070  00000ad6  00000ad6  00000bea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.UART_Init 00000018  00000f18  00000f18  0000102c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.UART_SendPayload 00000024  00000e26  00000e26  00000f3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.UART_ReceivePayload 0000001a  00000efe  00000efe  00001012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.UART_IsTxComplete 0000001c  00000eaa  00000eaa  00000fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.UART_IsRxComplete 0000001c  00000ec6  00000ec6  00000fda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.rx_cnt   00000002  008000bd  008000bd  00001156  2**0
                  ALLOC
 23 .bss.rx_len   00000002  008000bf  008000bf  00001156  2**0
                  ALLOC
 24 .bss.rx_buffer 00000002  008000c1  008000c1  00001156  2**0
                  ALLOC
 25 .bss.tx_cnt   00000002  008000c3  008000c3  00001156  2**0
                  ALLOC
 26 .bss.tx_len   00000002  008000c5  008000c5  00001156  2**0
                  ALLOC
 27 .bss.tx_buffer 00000002  008000c7  008000c7  00001156  2**0
                  ALLOC
 28 .text.triangleWave 00000046  00000c90  00000c90  00000da4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.delay   00000040  00000d5e  00000d5e  00000e72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.squareWave 00000038  00000d9e  00000d9e  00000eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.staircaseWave 000000ee  00000526  00000526  0000063a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .rodata       0000004a  00800062  00000ff8  0000110c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .text.sineWave 000000d8  000006f2  000006f2  00000806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.WAVE_Init 00000074  00000a62  00000a62  00000b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .progmemx.data 00000003  000000e4  000000e4  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.WAVE_MainFunction 00000162  000003c4  000003c4  000004d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .data.waveform_index 00000001  008000c9  000000e7  000001fb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 38 .bss.freq_value 00000001  008000ca  008000ca  00001156  2**0
                  ALLOC
 39 .bss.amp_value 00000001  008000cb  008000cb  00001156  2**0
                  ALLOC
 40 .bss.currentState 00000001  008000cc  008000cc  00001156  2**0
                  ALLOC
 41 .bss.waveform 00000008  008000b5  008000b5  00001156  2**0
                  ALLOC
 42 .bss.cmd_buffer 00000009  008000ac  008000ac  00001156  2**0
                  ALLOC
 43 .text.avrlibc.fplib 0000000e  00000f68  00000f68  0000107c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc.fplib 000000ce  0000089e  0000089e  000009b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc.fplib 0000000a  00000fc6  00000fc6  000010da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.avrlibc.fplib 00000008  00000fd0  00000fd0  000010e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.avrlibc.fplib 000000de  00000614  00000614  00000728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.avrlibc.fplib 0000005e  00000b46  00000b46  00000c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.avrlibc.fplib 0000007a  000009e8  000009e8  00000afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.avrlibc.fplib 00000048  00000c48  00000c48  00000d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.avrlibc.fplib 0000000c  00000fba  00000fba  000010ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.avrlibc.fplib 00000006  00000fe8  00000fe8  000010fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.avrlibc.fplib 0000000e  00000f76  00000f76  0000108a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.avrlibc.fplib 0000000e  00000f84  00000f84  00001098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.avrlibc.fplib 00000022  00000e4a  00000e4a  00000f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.avrlibc.fplib 00000044  00000cd6  00000cd6  00000dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.avrlibc.fplib 0000000e  00000f92  00000f92  000010a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.avrlibc.fplib 00000008  00000fd8  00000fd8  000010ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.avrlibc.fplib 000000d4  000007ca  000007ca  000008de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc.fplib 00000010  00000f58  00000f58  0000106c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.avrlibc.fplib 00000056  00000ba4  00000ba4  00000cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.avrlibc.fplib 00000028  00000dd6  00000dd6  00000eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.avrlibc.fplib 0000001c  00000ee2  00000ee2  00000ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.avrlibc.fplib 00000028  00000dfe  00000dfe  00000f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.avrlibc.fplib 0000004e  00000bfa  00000bfa  00000d0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.avrlibc 00000008  00000fe0  00000fe0  000010f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.avrlibc 0000000e  00000fa0  00000fa0  000010b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.avrlibc 000002dc  000000e8  000000e8  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.avrlibc 00000012  00000f46  00000f46  0000105a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.avrlibc 00000006  00000fee  00000fee  00001102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.libgcc.mul 00000020  00000e6c  00000e6c  00000f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.libgcc.div 00000044  00000d1a  00000d1a  00000e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.libgcc.mul 00000016  00000f30  00000f30  00001044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.libgcc.mul 0000001e  00000e8c  00000e8c  00000fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
   8:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
   c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  10:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  14:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  18:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  1c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  20:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  24:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  28:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  2c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_11>
  30:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  34:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__vector_13>
  38:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  3c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  40:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  44:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  48:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  4c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  50:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__bad_interrupt>
  54:	05 a8       	ldd	r0, Z+53	; 0x35
  56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
  58:	b2 d4       	rcall	.+2404   	; 0x9be <__vector_11+0x52>
  5a:	4e b9       	out	0x0e, r20	; 14
  5c:	38 36       	cpi	r19, 0x68	; 104
  5e:	a9 02       	muls	r26, r25
  60:	0c 50       	subi	r16, 0x0C	; 12
  62:	b9 91       	ld	r27, Y+
  64:	86 88       	ldd	r8, Z+22	; 0x16
  66:	08 3c       	cpi	r16, 0xC8	; 200
  68:	a6 aa       	std	Z+54, r10	; 0x36
  6a:	aa 2a       	or	r10, r26
  6c:	be 00       	.word	0x00be	; ????
  6e:	00 00       	nop
  70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <.dinit>:
  72:	00 60       	ori	r16, 0x00	; 0
  74:	00 62       	ori	r16, 0x20	; 32
  76:	80 00       	.word	0x0080	; ????
  78:	62 00       	.word	0x0062	; ????
  7a:	ac 00       	.word	0x00ac	; ????
  7c:	0f f8       	.word	0xf80f	; ????
  7e:	00 ac       	ldd	r0, Z+56	; 0x38
  80:	00 c9       	rjmp	.-3584   	; 0xfffff282 <__eeprom_end+0xff7ef282>
  82:	80 00       	.word	0x0080	; ????
  84:	c9 00       	.word	0x00c9	; ????
  86:	ca 00       	.word	0x00ca	; ????
  88:	00 e7       	ldi	r16, 0x70	; 112
  8a:	00 ca       	rjmp	.-3072   	; 0xfffff48c <__eeprom_end+0xff7ef48c>
  8c:	00 cd       	rjmp	.-1536   	; 0xfffffa8e <__eeprom_end+0xff7efa8e>
  8e:	80 00       	.word	0x0080	; ????

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf e5       	ldi	r28, 0x5F	; 95
  96:	d4 e0       	ldi	r29, 0x04	; 4
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	e2 e7       	ldi	r30, 0x72	; 114
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <__do_clear_bss+0x8>
  a4:	b5 91       	lpm	r27, Z+
  a6:	a5 91       	lpm	r26, Z+
  a8:	35 91       	lpm	r19, Z+
  aa:	25 91       	lpm	r18, Z+
  ac:	05 91       	lpm	r16, Z+
  ae:	07 fd       	sbrc	r16, 7
  b0:	0c c0       	rjmp	.+24     	; 0xca <__do_clear_bss>
  b2:	95 91       	lpm	r25, Z+
  b4:	85 91       	lpm	r24, Z+
  b6:	ef 01       	movw	r28, r30
  b8:	f9 2f       	mov	r31, r25
  ba:	e8 2f       	mov	r30, r24
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a2 17       	cp	r26, r18
  c2:	b3 07       	cpc	r27, r19
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0x20>
  c6:	fe 01       	movw	r30, r28
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__do_clear_bss+0x8>

000000ca <__do_clear_bss>:
  ca:	1d 92       	st	X+, r1
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	e1 f7       	brne	.-8      	; 0xca <__do_clear_bss>
  d2:	ef 38       	cpi	r30, 0x8F	; 143
  d4:	f4 07       	cpc	r31, r20
  d6:	31 f7       	brne	.-52     	; 0xa4 <__do_copy_data+0x8>
  d8:	0e 94 d7 07 	call	0xfae	; 0xfae <main>
  dc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

Disassembly of section .text:

00000ff4 <__bad_interrupt>:
 ff4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000fae <main>:

#include "waveform.h"

int main(void) {

	WAVE_Init();
 fae:	0e 94 31 05 	call	0xa62	; 0xa62 <WAVE_Init>
	
	sei();
 fb2:	78 94       	sei
	
	while (1)
	{
		WAVE_MainFunction();
 fb4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <WAVE_MainFunction>
 fb8:	fd cf       	rjmp	.-6      	; 0xfb4 <main+0x6>

Disassembly of section .text.__vector_11:

0000096c <__vector_11>:
static volatile uint16_t rx_cnt;



ISR(USART_RXC_vect)
{
 96c:	1f 92       	push	r1
 96e:	0f 92       	push	r0
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	0f 92       	push	r0
 974:	11 24       	eor	r1, r1
 976:	2f 93       	push	r18
 978:	3f 93       	push	r19
 97a:	4f 93       	push	r20
 97c:	5f 93       	push	r21
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	ef 93       	push	r30
 984:	ff 93       	push	r31
    uint8_t rx_data;
    
    cli();
 986:	f8 94       	cli
    
    /* Read rx_data. */
    rx_data = UDR;
 988:	8c b1       	in	r24, 0x0c	; 12
    
    /* Ignore spaces */
    if((rx_cnt < rx_len) && (rx_data != ' '))
 98a:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <rx_cnt>
 98e:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <rx_cnt+0x1>
 992:	20 91 bf 00 	lds	r18, 0x00BF	; 0x8000bf <rx_len>
 996:	30 91 c0 00 	lds	r19, 0x00C0	; 0x8000c0 <rx_len+0x1>
 99a:	42 17       	cp	r20, r18
 99c:	53 07       	cpc	r21, r19
 99e:	b0 f4       	brcc	.+44     	; 0x9cc <__vector_11+0x60>
 9a0:	80 32       	cpi	r24, 0x20	; 32
 9a2:	a1 f0       	breq	.+40     	; 0x9cc <__vector_11+0x60>
    {
        rx_buffer[rx_cnt] = rx_data;
 9a4:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <rx_cnt>
 9a8:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <rx_cnt+0x1>
 9ac:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <rx_buffer>
 9b0:	f0 91 c2 00 	lds	r31, 0x00C2	; 0x8000c2 <rx_buffer+0x1>
 9b4:	e2 0f       	add	r30, r18
 9b6:	f3 1f       	adc	r31, r19
 9b8:	80 83       	st	Z, r24
        rx_cnt++;
 9ba:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <rx_cnt>
 9be:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <rx_cnt+0x1>
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <rx_cnt+0x1>
 9c8:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <rx_cnt>
    else
    {
        /* Do nothing. */
    }
    
    sei();
 9cc:	78 94       	sei
}
 9ce:	ff 91       	pop	r31
 9d0:	ef 91       	pop	r30
 9d2:	9f 91       	pop	r25
 9d4:	8f 91       	pop	r24
 9d6:	5f 91       	pop	r21
 9d8:	4f 91       	pop	r20
 9da:	3f 91       	pop	r19
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti

Disassembly of section .text.__vector_13:

00000ad6 <__vector_13>:

ISR(USART_TXC_vect)
{
 ad6:	1f 92       	push	r1
 ad8:	0f 92       	push	r0
 ada:	0f b6       	in	r0, 0x3f	; 63
 adc:	0f 92       	push	r0
 ade:	11 24       	eor	r1, r1
 ae0:	2f 93       	push	r18
 ae2:	3f 93       	push	r19
 ae4:	8f 93       	push	r24
 ae6:	9f 93       	push	r25
 ae8:	ef 93       	push	r30
 aea:	ff 93       	push	r31
    cli();
 aec:	f8 94       	cli
    
    tx_cnt++;
 aee:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <tx_cnt>
 af2:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <tx_cnt+0x1>
 af6:	01 96       	adiw	r24, 0x01	; 1
 af8:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <tx_cnt+0x1>
 afc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <tx_cnt>
    
    if(tx_cnt < tx_len)
 b00:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <tx_cnt>
 b04:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <tx_cnt+0x1>
 b08:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <tx_len>
 b0c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <tx_len+0x1>
 b10:	28 17       	cp	r18, r24
 b12:	39 07       	cpc	r19, r25
 b14:	60 f4       	brcc	.+24     	; 0xb2e <__vector_13+0x58>
    {
        /* Send next byte. */
        UDR = tx_buffer[tx_cnt];
 b16:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <tx_cnt>
 b1a:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <tx_cnt+0x1>
 b1e:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <tx_buffer>
 b22:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <tx_buffer+0x1>
 b26:	e8 0f       	add	r30, r24
 b28:	f9 1f       	adc	r31, r25
 b2a:	80 81       	ld	r24, Z
 b2c:	8c b9       	out	0x0c, r24	; 12
    }
    sei();
 b2e:	78 94       	sei
}
 b30:	ff 91       	pop	r31
 b32:	ef 91       	pop	r30
 b34:	9f 91       	pop	r25
 b36:	8f 91       	pop	r24
 b38:	3f 91       	pop	r19
 b3a:	2f 91       	pop	r18
 b3c:	0f 90       	pop	r0
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	0f 90       	pop	r0
 b42:	1f 90       	pop	r1
 b44:	18 95       	reti

Disassembly of section .text.UART_Init:

00000f18 <UART_Init>:


void UART_Init(UART_cfg *my_cfg)
{
 f18:	fc 01       	movw	r30, r24
    /* Set baud rate */
    UBRRH = my_cfg->UBRRH_cfg;
 f1a:	80 81       	ld	r24, Z
 f1c:	80 bd       	out	0x20, r24	; 32
    UBRRL = my_cfg->UBRRL_cfg;
 f1e:	81 81       	ldd	r24, Z+1	; 0x01
 f20:	89 b9       	out	0x09, r24	; 9
    
    UCSRA = my_cfg->UCSRA_cfg;
 f22:	82 81       	ldd	r24, Z+2	; 0x02
 f24:	8b b9       	out	0x0b, r24	; 11
    UCSRB = my_cfg->UCSRB_cfg;
 f26:	83 81       	ldd	r24, Z+3	; 0x03
 f28:	8a b9       	out	0x0a, r24	; 10
    UCSRC = my_cfg->UCSRC_cfg;
 f2a:	84 81       	ldd	r24, Z+4	; 0x04
 f2c:	80 bd       	out	0x20, r24	; 32
 f2e:	08 95       	ret

Disassembly of section .text.UART_SendPayload:

00000e26 <UART_SendPayload>:
    
}

void UART_SendPayload(uint8_t *tx_data, uint16_t len)
{
    tx_buffer = tx_data;
 e26:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <tx_buffer+0x1>
 e2a:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <tx_buffer>
    tx_len    = len;
 e2e:	70 93 c6 00 	sts	0x00C6, r23	; 0x8000c6 <tx_len+0x1>
 e32:	60 93 c5 00 	sts	0x00C5, r22	; 0x8000c5 <tx_len>
    tx_cnt    = 0;
 e36:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <tx_cnt+0x1>
 e3a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <tx_cnt>
    
    /* Wait for UDR is empty. */
    while(0 == (UCSRA & (1 << UDRE)));
 e3e:	5d 9b       	sbis	0x0b, 5	; 11
 e40:	fe cf       	rjmp	.-4      	; 0xe3e <UART_SendPayload+0x18>
    
    /* Send the first byte to trigger the TxC interrupt. */
    UDR = tx_buffer[0];
 e42:	fc 01       	movw	r30, r24
 e44:	80 81       	ld	r24, Z
 e46:	8c b9       	out	0x0c, r24	; 12
 e48:	08 95       	ret

Disassembly of section .text.UART_ReceivePayload:

00000efe <UART_ReceivePayload>:
    
}

void UART_ReceivePayload(uint8_t *rx_data, uint16_t len)
{
    rx_buffer = rx_data;
 efe:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <rx_buffer+0x1>
 f02:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <rx_buffer>
    rx_len    = len;
 f06:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <rx_len+0x1>
 f0a:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <rx_len>
    rx_cnt    = 0;
 f0e:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <rx_cnt+0x1>
 f12:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <rx_cnt>
 f16:	08 95       	ret

Disassembly of section .text.UART_IsTxComplete:

00000eaa <UART_IsTxComplete>:
}

uint8_t UART_IsTxComplete(void)
{
    return ( (tx_cnt >= tx_len) ? 1 : 0 );
 eaa:	40 91 c3 00 	lds	r20, 0x00C3	; 0x8000c3 <tx_cnt>
 eae:	50 91 c4 00 	lds	r21, 0x00C4	; 0x8000c4 <tx_cnt+0x1>
 eb2:	20 91 c5 00 	lds	r18, 0x00C5	; 0x8000c5 <tx_len>
 eb6:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <tx_len+0x1>
 eba:	81 e0       	ldi	r24, 0x01	; 1
 ebc:	42 17       	cp	r20, r18
 ebe:	53 07       	cpc	r21, r19
 ec0:	08 f4       	brcc	.+2      	; 0xec4 <UART_IsTxComplete+0x1a>
 ec2:	80 e0       	ldi	r24, 0x00	; 0
}
 ec4:	08 95       	ret

Disassembly of section .text.UART_IsRxComplete:

00000ec6 <UART_IsRxComplete>:

uint8_t UART_IsRxComplete(void)
{
    return ( (rx_cnt >= rx_len) ? 1 : 0 );
 ec6:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <rx_cnt>
 eca:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <rx_cnt+0x1>
 ece:	20 91 bf 00 	lds	r18, 0x00BF	; 0x8000bf <rx_len>
 ed2:	30 91 c0 00 	lds	r19, 0x00C0	; 0x8000c0 <rx_len+0x1>
 ed6:	81 e0       	ldi	r24, 0x01	; 1
 ed8:	42 17       	cp	r20, r18
 eda:	53 07       	cpc	r21, r19
 edc:	08 f4       	brcc	.+2      	; 0xee0 <UART_IsRxComplete+0x1a>
 ede:	80 e0       	ldi	r24, 0x00	; 0
}
 ee0:	08 95       	ret

Disassembly of section .text.triangleWave:

00000c90 <triangleWave>:
    delay(time);
}

void triangleWave(uint8_t amp, uint8_t time)
{
    DAC_DDR = 255;
 c90:	9f ef       	ldi	r25, 0xFF	; 255
 c92:	97 bb       	out	0x17, r25	; 23
	DDRB =255;
 c94:	97 bb       	out	0x17, r25	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c96:	90 e1       	ldi	r25, 0x10	; 16
 c98:	9a 95       	dec	r25
 c9a:	f1 f7       	brne	.-4      	; 0xc98 <triangleWave+0x8>
 c9c:	00 c0       	rjmp	.+0      	; 0xc9e <triangleWave+0xe>
    {
	    DAC_PORT= i;
		_delay_us(5);
    }*/
  int t;
	  for(t=0;t<amp;t++) {PORTB = t; _delay_us(5);}
 c9e:	40 e0       	ldi	r20, 0x00	; 0
 ca0:	50 e0       	ldi	r21, 0x00	; 0
 ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <triangleWave+0x20>
 ca4:	48 bb       	out	0x18, r20	; 24
 ca6:	00 c0       	rjmp	.+0      	; 0xca8 <triangleWave+0x18>
 ca8:	00 c0       	rjmp	.+0      	; 0xcaa <triangleWave+0x1a>
 caa:	00 00       	nop
 cac:	4f 5f       	subi	r20, 0xFF	; 255
 cae:	5f 4f       	sbci	r21, 0xFF	; 255
 cb0:	28 2f       	mov	r18, r24
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	42 17       	cp	r20, r18
 cb6:	53 07       	cpc	r21, r19
 cb8:	ac f3       	brlt	.-22     	; 0xca4 <triangleWave+0x14>
 cba:	00 c0       	rjmp	.+0      	; 0xcbc <triangleWave+0x2c>
 cbc:	00 c0       	rjmp	.+0      	; 0xcbe <triangleWave+0x2e>
 cbe:	00 00       	nop
		  _delay_us(5);
	  for(t=amp;t>0;t--) {PORTB = t; _delay_us(5);}
 cc0:	06 c0       	rjmp	.+12     	; 0xcce <triangleWave+0x3e>
 cc2:	28 bb       	out	0x18, r18	; 24
 cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <triangleWave+0x36>
 cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <triangleWave+0x38>
 cc8:	00 00       	nop
 cca:	21 50       	subi	r18, 0x01	; 1
 ccc:	31 09       	sbc	r19, r1
 cce:	12 16       	cp	r1, r18
 cd0:	13 06       	cpc	r1, r19
 cd2:	bc f3       	brlt	.-18     	; 0xcc2 <triangleWave+0x32>
  
}
 cd4:	08 95       	ret

Disassembly of section .text.delay:

00000d5e <delay>:
static states_t currentState = GENERATE_WAVE;
static uint8_t amp_value = 0;
static uint8_t freq_value = 0;
static uint8_t waveform_index = WAVEFORM_NUM;

void delay(float time){
 d5e:	cf 92       	push	r12
 d60:	df 92       	push	r13
 d62:	ef 92       	push	r14
 d64:	ff 92       	push	r15
 d66:	cf 93       	push	r28
 d68:	df 93       	push	r29
 d6a:	6b 01       	movw	r12, r22
 d6c:	7c 01       	movw	r14, r24
	for (int j =0;j<time;j++)
 d6e:	c0 e0       	ldi	r28, 0x00	; 0
 d70:	d0 e0       	ldi	r29, 0x00	; 0
 d72:	01 c0       	rjmp	.+2      	; 0xd76 <delay+0x18>
 d74:	21 96       	adiw	r28, 0x01	; 1
 d76:	be 01       	movw	r22, r28
 d78:	0d 2e       	mov	r0, r29
 d7a:	00 0c       	add	r0, r0
 d7c:	88 0b       	sbc	r24, r24
 d7e:	99 0b       	sbc	r25, r25
 d80:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__floatsisf>
 d84:	a7 01       	movw	r20, r14
 d86:	96 01       	movw	r18, r12
 d88:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__cmpsf2>
 d8c:	88 23       	and	r24, r24
 d8e:	94 f3       	brlt	.-28     	; 0xd74 <delay+0x16>
	{
	}
}
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	ff 90       	pop	r15
 d96:	ef 90       	pop	r14
 d98:	df 90       	pop	r13
 d9a:	cf 90       	pop	r12
 d9c:	08 95       	ret

Disassembly of section .text.squareWave:

00000d9e <squareWave>:

void squareWave(uint8_t amp, uint8_t time)
{
 d9e:	cf 93       	push	r28
 da0:	c6 2f       	mov	r28, r22
    DAC_DDR = 255;
 da2:	9f ef       	ldi	r25, 0xFF	; 255
 da4:	97 bb       	out	0x17, r25	; 23
    DAC_PORT = amp;
 da6:	88 bb       	out	0x18, r24	; 24
	delay(time*2);
 da8:	70 e0       	ldi	r23, 0x00	; 0
 daa:	66 0f       	add	r22, r22
 dac:	77 1f       	adc	r23, r23
 dae:	07 2e       	mov	r0, r23
 db0:	00 0c       	add	r0, r0
 db2:	88 0b       	sbc	r24, r24
 db4:	99 0b       	sbc	r25, r25
 db6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__floatsisf>
 dba:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
	DAC_PORT = 0;
 dbe:	18 ba       	out	0x18, r1	; 24
	delay(time/2);
 dc0:	6c 2f       	mov	r22, r28
 dc2:	66 95       	lsr	r22
 dc4:	70 e0       	ldi	r23, 0x00	; 0
 dc6:	80 e0       	ldi	r24, 0x00	; 0
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__floatsisf>
 dce:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
}
 dd2:	cf 91       	pop	r28
 dd4:	08 95       	ret

Disassembly of section .text.staircaseWave:

00000526 <staircaseWave>:

void staircaseWave(uint8_t amp, uint8_t time)
{
 526:	8f 92       	push	r8
 528:	9f 92       	push	r9
 52a:	af 92       	push	r10
 52c:	bf 92       	push	r11
 52e:	cf 92       	push	r12
 530:	df 92       	push	r13
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	cf 93       	push	r28
 538:	c8 2f       	mov	r28, r24
    // Refresh DAC DDR to be output.
    DAC_DDR = 255;
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	87 bb       	out	0x17, r24	; 23

    // Generate waveform.
    DAC_PORT = 0x00;
 53e:	18 ba       	out	0x18, r1	; 24
    delay(time);
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 54a:	6b 01       	movw	r12, r22
 54c:	7c 01       	movw	r14, r24
 54e:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
    DAC_PORT = ((float)amp*1)/5;
 552:	6c 2f       	mov	r22, r28
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 55e:	4b 01       	movw	r8, r22
 560:	5c 01       	movw	r10, r24
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	40 ea       	ldi	r20, 0xA0	; 160
 568:	50 e4       	ldi	r21, 0x40	; 64
 56a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
 56e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixunssfsi>
 572:	68 bb       	out	0x18, r22	; 24
    delay(time);
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
    DAC_PORT = ((float)amp*2)/5;
 57c:	a5 01       	movw	r20, r10
 57e:	94 01       	movw	r18, r8
 580:	c5 01       	movw	r24, r10
 582:	b4 01       	movw	r22, r8
 584:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__addsf3>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	40 ea       	ldi	r20, 0xA0	; 160
 58e:	50 e4       	ldi	r21, 0x40	; 64
 590:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
 594:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixunssfsi>
 598:	68 bb       	out	0x18, r22	; 24
    delay(time);
 59a:	c7 01       	movw	r24, r14
 59c:	b6 01       	movw	r22, r12
 59e:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
    DAC_PORT = ((float)amp*3)/5;
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	40 e4       	ldi	r20, 0x40	; 64
 5a8:	50 e4       	ldi	r21, 0x40	; 64
 5aa:	c5 01       	movw	r24, r10
 5ac:	b4 01       	movw	r22, r8
 5ae:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
 5b2:	20 e0       	ldi	r18, 0x00	; 0
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	40 ea       	ldi	r20, 0xA0	; 160
 5b8:	50 e4       	ldi	r21, 0x40	; 64
 5ba:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
 5be:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixunssfsi>
 5c2:	68 bb       	out	0x18, r22	; 24
    delay(time);
 5c4:	c7 01       	movw	r24, r14
 5c6:	b6 01       	movw	r22, r12
 5c8:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
    DAC_PORT = ((float)amp*4)/5;
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	40 e8       	ldi	r20, 0x80	; 128
 5d2:	50 e4       	ldi	r21, 0x40	; 64
 5d4:	c5 01       	movw	r24, r10
 5d6:	b4 01       	movw	r22, r8
 5d8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	40 ea       	ldi	r20, 0xA0	; 160
 5e2:	50 e4       	ldi	r21, 0x40	; 64
 5e4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
 5e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixunssfsi>
 5ec:	68 bb       	out	0x18, r22	; 24
    delay(time);
 5ee:	c7 01       	movw	r24, r14
 5f0:	b6 01       	movw	r22, r12
 5f2:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
    DAC_PORT = amp;
 5f6:	c8 bb       	out	0x18, r28	; 24
    delay(time);
 5f8:	c7 01       	movw	r24, r14
 5fa:	b6 01       	movw	r22, r12
 5fc:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
}
 600:	cf 91       	pop	r28
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	df 90       	pop	r13
 608:	cf 90       	pop	r12
 60a:	bf 90       	pop	r11
 60c:	af 90       	pop	r10
 60e:	9f 90       	pop	r9
 610:	8f 90       	pop	r8
 612:	08 95       	ret

Disassembly of section .text.sineWave:

000006f2 <sineWave>:
	  for(t=amp;t>0;t--) {PORTB = t; _delay_us(5);}
  
}

void sineWave(uint8_t amp, uint8_t time)
{
 6f2:	af 92       	push	r10
 6f4:	bf 92       	push	r11
 6f6:	cf 92       	push	r12
 6f8:	df 92       	push	r13
 6fa:	ef 92       	push	r14
 6fc:	ff 92       	push	r15
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	ca 54       	subi	r28, 0x4A	; 74
 70c:	d1 09       	sbc	r29, r1
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	f8 94       	cli
 712:	de bf       	out	0x3e, r29	; 62
 714:	0f be       	out	0x3f, r0	; 63
 716:	cd bf       	out	0x3d, r28	; 61
 718:	a8 2e       	mov	r10, r24
 71a:	b6 2e       	mov	r11, r22
    DAC_DDR = 255;
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	87 bb       	out	0x17, r24	; 23
/*	unsigned int v[]={128,150,171,192,210,226,238,248,254,255,254,248,238,226,210,192,171,150,128,105,84,64,45,29,17,7,1,0,1,7,17,29,45,64,84,105,128};
		for(int i=0;i<36;i++)
		{PORTB =v[i]; _delay_us(20);}*/
	int v[]={0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360};
 720:	8a e4       	ldi	r24, 0x4A	; 74
 722:	e2 e6       	ldi	r30, 0x62	; 98
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	de 01       	movw	r26, r28
 728:	11 96       	adiw	r26, 0x01	; 1
 72a:	01 90       	ld	r0, Z+
 72c:	0d 92       	st	X+, r0
 72e:	8a 95       	dec	r24
 730:	e1 f7       	brne	.-8      	; 0x72a <sineWave+0x38>
		for(int i=0;i<36;i++)
 732:	00 e0       	ldi	r16, 0x00	; 0
 734:	10 e0       	ldi	r17, 0x00	; 0
 736:	34 c0       	rjmp	.+104    	; 0x7a0 <sineWave+0xae>
		{
			DAC_PORT=amp+amp*sin(v[i]);
 738:	6a 2d       	mov	r22, r10
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__floatsisf>
 744:	6b 01       	movw	r12, r22
 746:	7c 01       	movw	r14, r24
 748:	f8 01       	movw	r30, r16
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	8c 0f       	add	r24, r28
 754:	9d 1f       	adc	r25, r29
 756:	e8 0f       	add	r30, r24
 758:	f9 1f       	adc	r31, r25
 75a:	60 81       	ld	r22, Z
 75c:	71 81       	ldd	r23, Z+1	; 0x01
 75e:	07 2e       	mov	r0, r23
 760:	00 0c       	add	r0, r0
 762:	88 0b       	sbc	r24, r24
 764:	99 0b       	sbc	r25, r25
 766:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__floatsisf>
 76a:	0e 94 ac 07 	call	0xf58	; 0xf58 <sin>
 76e:	9b 01       	movw	r18, r22
 770:	ac 01       	movw	r20, r24
 772:	c7 01       	movw	r24, r14
 774:	b6 01       	movw	r22, r12
 776:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
 77a:	9b 01       	movw	r18, r22
 77c:	ac 01       	movw	r20, r24
 77e:	c7 01       	movw	r24, r14
 780:	b6 01       	movw	r22, r12
 782:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__addsf3>
 786:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixunssfsi>
 78a:	68 bb       	out	0x18, r22	; 24
			delay(time);
 78c:	6b 2d       	mov	r22, r11
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 798:	0e 94 af 06 	call	0xd5e	; 0xd5e <delay>
    DAC_DDR = 255;
/*	unsigned int v[]={128,150,171,192,210,226,238,248,254,255,254,248,238,226,210,192,171,150,128,105,84,64,45,29,17,7,1,0,1,7,17,29,45,64,84,105,128};
		for(int i=0;i<36;i++)
		{PORTB =v[i]; _delay_us(20);}*/
	int v[]={0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360};
		for(int i=0;i<36;i++)
 79c:	0f 5f       	subi	r16, 0xFF	; 255
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	04 32       	cpi	r16, 0x24	; 36
 7a2:	11 05       	cpc	r17, r1
 7a4:	4c f2       	brlt	.-110    	; 0x738 <sineWave+0x46>
    for (int i=amp;i>=0;i--)
    {
	    DAC_PORT= i;
    }
*/	
}
 7a6:	c6 5b       	subi	r28, 0xB6	; 182
 7a8:	df 4f       	sbci	r29, 0xFF	; 255
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	ff 90       	pop	r15
 7be:	ef 90       	pop	r14
 7c0:	df 90       	pop	r13
 7c2:	cf 90       	pop	r12
 7c4:	bf 90       	pop	r11
 7c6:	af 90       	pop	r10
 7c8:	08 95       	ret

Disassembly of section .text.WAVE_Init:

00000a62 <WAVE_Init>:

void WAVE_Init(void)
{
 a62:	cf 93       	push	r28
 a64:	df 93       	push	r29
 a66:	00 d0       	rcall	.+0      	; 0xa68 <WAVE_Init+0x6>
 a68:	00 d0       	rcall	.+0      	; 0xa6a <WAVE_Init+0x8>
 a6a:	1f 92       	push	r1
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62
    
    /* Init UART driver. */
    UART_cfg my_uart_cfg;
    
    /* Set USART mode. */
    my_uart_cfg.UBRRL_cfg = (BAUD_RATE_VALUE)&0x00FF;
 a70:	89 e1       	ldi	r24, 0x19	; 25
 a72:	8a 83       	std	Y+2, r24	; 0x02
    my_uart_cfg.UBRRH_cfg = (((BAUD_RATE_VALUE)&0xFF00)>>8);
 a74:	19 82       	std	Y+1, r1	; 0x01
    
    my_uart_cfg.UCSRA_cfg = 0;
 a76:	1b 82       	std	Y+3, r1	; 0x03
    my_uart_cfg.UCSRB_cfg = (1<<RXEN)  | (1<<TXEN) | (1<<TXCIE) | (1<<RXCIE);
 a78:	88 ed       	ldi	r24, 0xD8	; 216
 a7a:	8c 83       	std	Y+4, r24	; 0x04
    my_uart_cfg.UCSRC_cfg = (1<<URSEL) | (3<<UCSZ0);
 a7c:	86 e8       	ldi	r24, 0x86	; 134
 a7e:	8d 83       	std	Y+5, r24	; 0x05
    
    UART_Init(&my_uart_cfg);
 a80:	ce 01       	movw	r24, r28
 a82:	01 96       	adiw	r24, 0x01	; 1
 a84:	0e 94 8c 07 	call	0xf18	; 0xf18 <UART_Init>
    
    
    /* Clear cmd_buffer. */
    for(i = 0; i < FULL_CMD_CNT; i += 1)
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	06 c0       	rjmp	.+12     	; 0xa98 <WAVE_Init+0x36>
    {
        cmd_buffer[i] = 0;
 a8c:	e8 2f       	mov	r30, r24
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	e4 55       	subi	r30, 0x54	; 84
 a92:	ff 4f       	sbci	r31, 0xFF	; 255
 a94:	10 82       	st	Z, r1
    
    UART_Init(&my_uart_cfg);
    
    
    /* Clear cmd_buffer. */
    for(i = 0; i < FULL_CMD_CNT; i += 1)
 a96:	8f 5f       	subi	r24, 0xFF	; 255
 a98:	89 30       	cpi	r24, 0x09	; 9
 a9a:	c0 f3       	brcs	.-16     	; 0xa8c <WAVE_Init+0x2a>
    {
        cmd_buffer[i] = 0;
    }
    
    /* Initialize waveform array. */
    waveform[0] = squareWave;
 a9c:	e5 eb       	ldi	r30, 0xB5	; 181
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	8f ec       	ldi	r24, 0xCF	; 207
 aa2:	96 e0       	ldi	r25, 0x06	; 6
 aa4:	91 83       	std	Z+1, r25	; 0x01
 aa6:	80 83       	st	Z, r24
    waveform[1] = staircaseWave;
 aa8:	83 e9       	ldi	r24, 0x93	; 147
 aaa:	92 e0       	ldi	r25, 0x02	; 2
 aac:	93 83       	std	Z+3, r25	; 0x03
 aae:	82 83       	std	Z+2, r24	; 0x02
    waveform[2] = triangleWave;
 ab0:	88 e4       	ldi	r24, 0x48	; 72
 ab2:	96 e0       	ldi	r25, 0x06	; 6
 ab4:	95 83       	std	Z+5, r25	; 0x05
 ab6:	84 83       	std	Z+4, r24	; 0x04
    waveform[3] = sineWave;
 ab8:	89 e7       	ldi	r24, 0x79	; 121
 aba:	93 e0       	ldi	r25, 0x03	; 3
 abc:	97 83       	std	Z+7, r25	; 0x07
 abe:	86 83       	std	Z+6, r24	; 0x06

    /* Start with getting which wave to generate. */ 
    currentState = UPDATE_WAVE;    
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <currentState>
}
 ac6:	0f 90       	pop	r0
 ac8:	0f 90       	pop	r0
 aca:	0f 90       	pop	r0
 acc:	0f 90       	pop	r0
 ace:	0f 90       	pop	r0
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	08 95       	ret

Disassembly of section .text.WAVE_MainFunction:

000003c4 <WAVE_MainFunction>:

void WAVE_MainFunction(void)
{    
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <WAVE_MainFunction+0xa>
 3ce:	1f 92       	push	r1
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62

    // Main function must have two states,
    // First state is command parsing and waveform selection.
    // second state is waveform executing.
    switch(currentState)
 3d4:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <currentState>
 3d8:	88 23       	and	r24, r24
 3da:	09 f4       	brne	.+2      	; 0x3de <WAVE_MainFunction+0x1a>
 3dc:	6d c0       	rjmp	.+218    	; 0x4b8 <__stack+0x59>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <WAVE_MainFunction+0x20>
 3e2:	99 c0       	rjmp	.+306    	; 0x516 <__stack+0xb7>
    {
        case UPDATE_WAVE:
        {

            /* Receive the full buffer command. */
            UART_ReceivePayload(cmd_buffer, FULL_CMD_CNT);
 3e4:	69 e0       	ldi	r22, 0x09	; 9
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	8c ea       	ldi	r24, 0xAC	; 172
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 7f 07 	call	0xefe	; 0xefe <UART_ReceivePayload>
            
            /* Pull unitl reception is complete. */
            while(0 == UART_IsRxComplete());
 3f0:	0e 94 63 07 	call	0xec6	; 0xec6 <UART_IsRxComplete>
 3f4:	88 23       	and	r24, r24
 3f6:	e1 f3       	breq	.-8      	; 0x3f0 <WAVE_MainFunction+0x2c>

            /* Check if the cmd is valid. */
            if((cmd_buffer[MARKER_START] == '@') && (cmd_buffer[MARKER_END] == ';'))
 3f8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <cmd_buffer>
 3fc:	80 34       	cpi	r24, 0x40	; 64
 3fe:	09 f0       	breq	.+2      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 400:	47 c0       	rjmp	.+142    	; 0x490 <__stack+0x31>
 402:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <cmd_buffer+0x8>
 406:	8b 33       	cpi	r24, 0x3B	; 59
 408:	89 f0       	breq	.+34     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	42 c0       	rjmp	.+132    	; 0x492 <__stack+0x33>
            {
                // Extract amplitude and freq values before sending them to the waveform generator.
                /* Compute amplitude. */
                {
                    char _buffer[_CMD_AMP_CNT];
                    for(uint8_t i = 0; i < _CMD_AMP_CNT; ++i) { _buffer[i] = cmd_buffer[AMP_OFFSET+i]; }
 40e:	82 2f       	mov	r24, r18
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	fc 01       	movw	r30, r24
 414:	e2 55       	subi	r30, 0x52	; 82
 416:	ff 4f       	sbci	r31, 0xFF	; 255
 418:	30 81       	ld	r19, Z
 41a:	e1 e0       	ldi	r30, 0x01	; 1
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	ec 0f       	add	r30, r28
 420:	fd 1f       	adc	r31, r29
 422:	e8 0f       	add	r30, r24
 424:	f9 1f       	adc	r31, r25
 426:	30 83       	st	Z, r19
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	01 c0       	rjmp	.+2      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	23 30       	cpi	r18, 0x03	; 3
 430:	70 f3       	brcs	.-36     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
                    amp_value = atoi(_buffer);
 432:	be 01       	movw	r22, r28
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	80 e8       	ldi	r24, 0x80	; 128
 43a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <atoi>
 43e:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <amp_value>
                }

                /* Compute frequency. */
                {
                    char _buffer[_CMD_FRQ_CNT];
                    for(uint8_t i = 0; i < _CMD_FRQ_CNT; ++i) { _buffer[i] = cmd_buffer[FREQ_OFFSET+i]; }
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	0e c0       	rjmp	.+28     	; 0x462 <__stack+0x3>
 446:	82 2f       	mov	r24, r18
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	ef 54       	subi	r30, 0x4F	; 79
 44e:	ff 4f       	sbci	r31, 0xFF	; 255
 450:	30 81       	ld	r19, Z
 452:	e1 e0       	ldi	r30, 0x01	; 1
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	ec 0f       	add	r30, r28
 458:	fd 1f       	adc	r31, r29
 45a:	e8 0f       	add	r30, r24
 45c:	f9 1f       	adc	r31, r25
 45e:	30 83       	st	Z, r19
 460:	2f 5f       	subi	r18, 0xFF	; 255
 462:	23 30       	cpi	r18, 0x03	; 3
 464:	80 f3       	brcs	.-32     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
                    freq_value = atoi(_buffer);
 466:	be 01       	movw	r22, r28
 468:	6f 5f       	subi	r22, 0xFF	; 255
 46a:	7f 4f       	sbci	r23, 0xFF	; 255
 46c:	80 e8       	ldi	r24, 0x80	; 128
 46e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <atoi>
 472:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <freq_value>
                }

                /* Compute waveform. */
                {
                    waveform_index = cmd_buffer[WAVE_OFFSET] - '0';
 476:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <cmd_buffer+0x1>
 47a:	80 53       	subi	r24, 0x30	; 48
 47c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <waveform_index>
 480:	0a c0       	rjmp	.+20     	; 0x496 <__stack+0x37>
            else
            {
               /* Clear cmd_buffer. */
                for(uint8_t i = 0; i < FULL_CMD_CNT; i += 1)
                {
                    cmd_buffer[i] = 0;
 482:	e8 2f       	mov	r30, r24
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	e4 55       	subi	r30, 0x54	; 84
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	10 82       	st	Z, r1
                }
            } 
            else
            {
               /* Clear cmd_buffer. */
                for(uint8_t i = 0; i < FULL_CMD_CNT; i += 1)
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__stack+0x33>
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	89 30       	cpi	r24, 0x09	; 9
 494:	b0 f3       	brcs	.-20     	; 0x482 <__stack+0x23>
                    cmd_buffer[i] = 0;
                }
            }

            // Trigger a new reception.
            UART_ReceivePayload(cmd_buffer, FULL_CMD_CNT);
 496:	69 e0       	ldi	r22, 0x09	; 9
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	8c ea       	ldi	r24, 0xAC	; 172
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 7f 07 	call	0xefe	; 0xefe <UART_ReceivePayload>

            UART_SendPayload((uint8_t *)"\r>", 2);
 4a2:	62 e0       	ldi	r22, 0x02	; 2
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	84 ee       	ldi	r24, 0xE4	; 228
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	a0 e0       	ldi	r26, 0x00	; 0
 4ac:	0e 94 13 07 	call	0xe26	; 0xe26 <UART_SendPayload>
            while (0 == UART_IsTxComplete());
 4b0:	0e 94 55 07 	call	0xeaa	; 0xeaa <UART_IsTxComplete>
 4b4:	88 23       	and	r24, r24
 4b6:	e1 f3       	breq	.-8      	; 0x4b0 <__stack+0x51>
        }
        case GENERATE_WAVE:
        {
            // Execute waveform..
            if(waveform_index < WAVEFORM_NUM)
 4b8:	10 91 c9 00 	lds	r17, 0x00C9	; 0x8000c9 <waveform_index>
 4bc:	14 30       	cpi	r17, 0x04	; 4
 4be:	18 f5       	brcc	.+70     	; 0x506 <__stack+0xa7>
            {
				float time = (1/(float)freq_value)*1000;
 4c0:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <freq_value>
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 4ce:	9b 01       	movw	r18, r22
 4d0:	ac 01       	movw	r20, r24
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	9f e3       	ldi	r25, 0x3F	; 63
 4da:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	4a e7       	ldi	r20, 0x7A	; 122
 4e4:	54 e4       	ldi	r21, 0x44	; 68
 4e6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
                waveform[waveform_index](amp_value, time);
 4ea:	e1 2f       	mov	r30, r17
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	eb 54       	subi	r30, 0x4B	; 75
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	00 81       	ld	r16, Z
 4f8:	11 81       	ldd	r17, Z+1	; 0x01
 4fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixunssfsi>
 4fe:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <amp_value>
 502:	f8 01       	movw	r30, r16
 504:	09 95       	icall
            }
            // Keep in generate wave if no command it received.
            currentState = (1 == UART_IsRxComplete()) ? UPDATE_WAVE : GENERATE_WAVE;
 506:	0e 94 63 07 	call	0xec6	; 0xec6 <UART_IsRxComplete>
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	09 f0       	breq	.+2      	; 0x512 <__stack+0xb3>
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <currentState>
            break;
        }
        default: {/* Do nothing.*/}
    }
}
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000f68 <__subsf3>:
 f68:	50 58       	subi	r21, 0x80	; 128

00000f6a <__addsf3>:
 f6a:	bb 27       	eor	r27, r27
 f6c:	aa 27       	eor	r26, r26
 f6e:	0e 94 4f 04 	call	0x89e	; 0x89e <__addsf3x>
 f72:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000089e <__addsf3x>:
 89e:	11 c0       	rjmp	.+34     	; 0x8c2 <__addsf3x+0x24>
 8a0:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscA>
 8a4:	38 f0       	brcs	.+14     	; 0x8b4 <__addsf3x+0x16>
 8a6:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscB>
 8aa:	20 f0       	brcs	.+8      	; 0x8b4 <__addsf3x+0x16>
 8ac:	39 f4       	brne	.+14     	; 0x8bc <__addsf3x+0x1e>
 8ae:	9f 3f       	cpi	r25, 0xFF	; 255
 8b0:	19 f4       	brne	.+6      	; 0x8b8 <__addsf3x+0x1a>
 8b2:	26 f4       	brtc	.+8      	; 0x8bc <__addsf3x+0x1e>
 8b4:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_nan>
 8b8:	0e f4       	brtc	.+2      	; 0x8bc <__addsf3x+0x1e>
 8ba:	e0 95       	com	r30
 8bc:	e7 fb       	bst	r30, 7
 8be:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 8c2:	e9 2f       	mov	r30, r25
 8c4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_split3>
 8c8:	58 f3       	brcs	.-42     	; 0x8a0 <__addsf3x+0x2>
 8ca:	ba 17       	cp	r27, r26
 8cc:	62 07       	cpc	r22, r18
 8ce:	73 07       	cpc	r23, r19
 8d0:	84 07       	cpc	r24, r20
 8d2:	95 07       	cpc	r25, r21
 8d4:	20 f0       	brcs	.+8      	; 0x8de <__addsf3x+0x40>
 8d6:	79 f4       	brne	.+30     	; 0x8f6 <__addsf3x+0x58>
 8d8:	a6 f5       	brtc	.+104    	; 0x942 <__addsf3x+0xa4>
 8da:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_zero>
 8de:	0e f4       	brtc	.+2      	; 0x8e2 <__addsf3x+0x44>
 8e0:	e0 95       	com	r30
 8e2:	0b 2e       	mov	r0, r27
 8e4:	ba 2f       	mov	r27, r26
 8e6:	a0 2d       	mov	r26, r0
 8e8:	0b 01       	movw	r0, r22
 8ea:	b9 01       	movw	r22, r18
 8ec:	90 01       	movw	r18, r0
 8ee:	0c 01       	movw	r0, r24
 8f0:	ca 01       	movw	r24, r20
 8f2:	a0 01       	movw	r20, r0
 8f4:	11 24       	eor	r1, r1
 8f6:	ff 27       	eor	r31, r31
 8f8:	59 1b       	sub	r21, r25
 8fa:	99 f0       	breq	.+38     	; 0x922 <__addsf3x+0x84>
 8fc:	59 3f       	cpi	r21, 0xF9	; 249
 8fe:	50 f4       	brcc	.+20     	; 0x914 <__addsf3x+0x76>
 900:	50 3e       	cpi	r21, 0xE0	; 224
 902:	68 f1       	brcs	.+90     	; 0x95e <__addsf3x+0xc0>
 904:	1a 16       	cp	r1, r26
 906:	f0 40       	sbci	r31, 0x00	; 0
 908:	a2 2f       	mov	r26, r18
 90a:	23 2f       	mov	r18, r19
 90c:	34 2f       	mov	r19, r20
 90e:	44 27       	eor	r20, r20
 910:	58 5f       	subi	r21, 0xF8	; 248
 912:	f3 cf       	rjmp	.-26     	; 0x8fa <__addsf3x+0x5c>
 914:	46 95       	lsr	r20
 916:	37 95       	ror	r19
 918:	27 95       	ror	r18
 91a:	a7 95       	ror	r26
 91c:	f0 40       	sbci	r31, 0x00	; 0
 91e:	53 95       	inc	r21
 920:	c9 f7       	brne	.-14     	; 0x914 <__addsf3x+0x76>
 922:	7e f4       	brtc	.+30     	; 0x942 <__addsf3x+0xa4>
 924:	1f 16       	cp	r1, r31
 926:	ba 0b       	sbc	r27, r26
 928:	62 0b       	sbc	r22, r18
 92a:	73 0b       	sbc	r23, r19
 92c:	84 0b       	sbc	r24, r20
 92e:	ba f0       	brmi	.+46     	; 0x95e <__addsf3x+0xc0>
 930:	91 50       	subi	r25, 0x01	; 1
 932:	a1 f0       	breq	.+40     	; 0x95c <__addsf3x+0xbe>
 934:	ff 0f       	add	r31, r31
 936:	bb 1f       	adc	r27, r27
 938:	66 1f       	adc	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	c2 f7       	brpl	.-16     	; 0x930 <__addsf3x+0x92>
 940:	0e c0       	rjmp	.+28     	; 0x95e <__addsf3x+0xc0>
 942:	ba 0f       	add	r27, r26
 944:	62 1f       	adc	r22, r18
 946:	73 1f       	adc	r23, r19
 948:	84 1f       	adc	r24, r20
 94a:	48 f4       	brcc	.+18     	; 0x95e <__addsf3x+0xc0>
 94c:	87 95       	ror	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f7 95       	ror	r31
 956:	9e 3f       	cpi	r25, 0xFE	; 254
 958:	08 f0       	brcs	.+2      	; 0x95c <__addsf3x+0xbe>
 95a:	b0 cf       	rjmp	.-160    	; 0x8bc <__addsf3x+0x1e>
 95c:	93 95       	inc	r25
 95e:	88 0f       	add	r24, r24
 960:	08 f0       	brcs	.+2      	; 0x964 <__addsf3x+0xc6>
 962:	99 27       	eor	r25, r25
 964:	ee 0f       	add	r30, r30
 966:	97 95       	ror	r25
 968:	87 95       	ror	r24
 96a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000fc6 <__cmpsf2>:
 fc6:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_cmp>
 fca:	08 f4       	brcc	.+2      	; 0xfce <__cmpsf2+0x8>
 fcc:	81 e0       	ldi	r24, 0x01	; 1
 fce:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000fd0 <__divsf3>:
 fd0:	0e 94 0a 03 	call	0x614	; 0x614 <__divsf3x>
 fd4:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000614 <__divsf3x>:
 614:	10 c0       	rjmp	.+32     	; 0x636 <__divsf3x+0x22>
 616:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscB>
 61a:	58 f0       	brcs	.+22     	; 0x632 <__divsf3x+0x1e>
 61c:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscA>
 620:	40 f0       	brcs	.+16     	; 0x632 <__divsf3x+0x1e>
 622:	29 f4       	brne	.+10     	; 0x62e <__divsf3x+0x1a>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	29 f0       	breq	.+10     	; 0x632 <__divsf3x+0x1e>
 628:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 62c:	51 11       	cpse	r21, r1
 62e:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>
 632:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_nan>
 636:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_split3>
 63a:	68 f3       	brcs	.-38     	; 0x616 <__divsf3x+0x2>

0000063c <__divsf3_pse>:
 63c:	99 23       	and	r25, r25
 63e:	b1 f3       	breq	.-20     	; 0x62c <__divsf3x+0x18>
 640:	55 23       	and	r21, r21
 642:	91 f3       	breq	.-28     	; 0x628 <__divsf3x+0x14>
 644:	95 1b       	sub	r25, r21
 646:	55 0b       	sbc	r21, r21
 648:	bb 27       	eor	r27, r27
 64a:	aa 27       	eor	r26, r26
 64c:	62 17       	cp	r22, r18
 64e:	73 07       	cpc	r23, r19
 650:	84 07       	cpc	r24, r20
 652:	38 f0       	brcs	.+14     	; 0x662 <__divsf3_pse+0x26>
 654:	9f 5f       	subi	r25, 0xFF	; 255
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	22 0f       	add	r18, r18
 65a:	33 1f       	adc	r19, r19
 65c:	44 1f       	adc	r20, r20
 65e:	aa 1f       	adc	r26, r26
 660:	a9 f3       	breq	.-22     	; 0x64c <__divsf3_pse+0x10>
 662:	35 d0       	rcall	.+106    	; 0x6ce <__divsf3_pse+0x92>
 664:	0e 2e       	mov	r0, r30
 666:	3a f0       	brmi	.+14     	; 0x676 <__divsf3_pse+0x3a>
 668:	e0 e8       	ldi	r30, 0x80	; 128
 66a:	32 d0       	rcall	.+100    	; 0x6d0 <__divsf3_pse+0x94>
 66c:	91 50       	subi	r25, 0x01	; 1
 66e:	50 40       	sbci	r21, 0x00	; 0
 670:	e6 95       	lsr	r30
 672:	00 1c       	adc	r0, r0
 674:	ca f7       	brpl	.-14     	; 0x668 <__divsf3_pse+0x2c>
 676:	2b d0       	rcall	.+86     	; 0x6ce <__divsf3_pse+0x92>
 678:	fe 2f       	mov	r31, r30
 67a:	29 d0       	rcall	.+82     	; 0x6ce <__divsf3_pse+0x92>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	bb 1f       	adc	r27, r27
 684:	26 17       	cp	r18, r22
 686:	37 07       	cpc	r19, r23
 688:	48 07       	cpc	r20, r24
 68a:	ab 07       	cpc	r26, r27
 68c:	b0 e8       	ldi	r27, 0x80	; 128
 68e:	09 f0       	breq	.+2      	; 0x692 <__divsf3_pse+0x56>
 690:	bb 0b       	sbc	r27, r27
 692:	80 2d       	mov	r24, r0
 694:	bf 01       	movw	r22, r30
 696:	ff 27       	eor	r31, r31
 698:	93 58       	subi	r25, 0x83	; 131
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x70>
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	51 05       	cpc	r21, r1
 6a2:	78 f0       	brcs	.+30     	; 0x6c2 <__divsf3_pse+0x86>
 6a4:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 6a8:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	e4 f3       	brlt	.-8      	; 0x6a8 <__divsf3_pse+0x6c>
 6b0:	98 3e       	cpi	r25, 0xE8	; 232
 6b2:	d4 f3       	brlt	.-12     	; 0x6a8 <__divsf3_pse+0x6c>
 6b4:	86 95       	lsr	r24
 6b6:	77 95       	ror	r23
 6b8:	67 95       	ror	r22
 6ba:	b7 95       	ror	r27
 6bc:	f7 95       	ror	r31
 6be:	9f 5f       	subi	r25, 0xFF	; 255
 6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__divsf3_pse+0x78>
 6c2:	88 0f       	add	r24, r24
 6c4:	91 1d       	adc	r25, r1
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret
 6ce:	e1 e0       	ldi	r30, 0x01	; 1
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	bb 1f       	adc	r27, r27
 6d8:	62 17       	cp	r22, r18
 6da:	73 07       	cpc	r23, r19
 6dc:	84 07       	cpc	r24, r20
 6de:	ba 07       	cpc	r27, r26
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <__divsf3_pse+0xae>
 6e2:	62 1b       	sub	r22, r18
 6e4:	73 0b       	sbc	r23, r19
 6e6:	84 0b       	sbc	r24, r20
 6e8:	ba 0b       	sbc	r27, r26
 6ea:	ee 1f       	adc	r30, r30
 6ec:	88 f7       	brcc	.-30     	; 0x6d0 <__divsf3_pse+0x94>
 6ee:	e0 95       	com	r30
 6f0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000b46 <__fixunssfsi>:
 b46:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_splitA>
 b4a:	88 f0       	brcs	.+34     	; 0xb6e <__fixunssfsi+0x28>
 b4c:	9f 57       	subi	r25, 0x7F	; 127
 b4e:	98 f0       	brcs	.+38     	; 0xb76 <__fixunssfsi+0x30>
 b50:	b9 2f       	mov	r27, r25
 b52:	99 27       	eor	r25, r25
 b54:	b7 51       	subi	r27, 0x17	; 23
 b56:	b0 f0       	brcs	.+44     	; 0xb84 <__fixunssfsi+0x3e>
 b58:	e1 f0       	breq	.+56     	; 0xb92 <__fixunssfsi+0x4c>
 b5a:	66 0f       	add	r22, r22
 b5c:	77 1f       	adc	r23, r23
 b5e:	88 1f       	adc	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	1a f0       	brmi	.+6      	; 0xb6a <__fixunssfsi+0x24>
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__fixunssfsi+0x14>
 b68:	14 c0       	rjmp	.+40     	; 0xb92 <__fixunssfsi+0x4c>
 b6a:	b1 30       	cpi	r27, 0x01	; 1
 b6c:	91 f0       	breq	.+36     	; 0xb92 <__fixunssfsi+0x4c>
 b6e:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_zero>
 b72:	b1 e0       	ldi	r27, 0x01	; 1
 b74:	08 95       	ret
 b76:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_zero>
 b7a:	67 2f       	mov	r22, r23
 b7c:	78 2f       	mov	r23, r24
 b7e:	88 27       	eor	r24, r24
 b80:	b8 5f       	subi	r27, 0xF8	; 248
 b82:	39 f0       	breq	.+14     	; 0xb92 <__fixunssfsi+0x4c>
 b84:	b9 3f       	cpi	r27, 0xF9	; 249
 b86:	cc f3       	brlt	.-14     	; 0xb7a <__fixunssfsi+0x34>
 b88:	86 95       	lsr	r24
 b8a:	77 95       	ror	r23
 b8c:	67 95       	ror	r22
 b8e:	b3 95       	inc	r27
 b90:	d9 f7       	brne	.-10     	; 0xb88 <__fixunssfsi+0x42>
 b92:	3e f4       	brtc	.+14     	; 0xba2 <__fixunssfsi+0x5c>
 b94:	90 95       	com	r25
 b96:	80 95       	com	r24
 b98:	70 95       	com	r23
 b9a:	61 95       	neg	r22
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000009e8 <__floatunsisf>:
 9e8:	e8 94       	clt
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <__floatsisf+0x12>

000009ec <__floatsisf>:
 9ec:	97 fb       	bst	r25, 7
 9ee:	3e f4       	brtc	.+14     	; 0x9fe <__floatsisf+0x12>
 9f0:	90 95       	com	r25
 9f2:	80 95       	com	r24
 9f4:	70 95       	com	r23
 9f6:	61 95       	neg	r22
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	99 23       	and	r25, r25
 a00:	a9 f0       	breq	.+42     	; 0xa2c <__floatsisf+0x40>
 a02:	f9 2f       	mov	r31, r25
 a04:	96 e9       	ldi	r25, 0x96	; 150
 a06:	bb 27       	eor	r27, r27
 a08:	93 95       	inc	r25
 a0a:	f6 95       	lsr	r31
 a0c:	87 95       	ror	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	b7 95       	ror	r27
 a14:	f1 11       	cpse	r31, r1
 a16:	f8 cf       	rjmp	.-16     	; 0xa08 <__floatsisf+0x1c>
 a18:	fa f4       	brpl	.+62     	; 0xa58 <__floatsisf+0x6c>
 a1a:	bb 0f       	add	r27, r27
 a1c:	11 f4       	brne	.+4      	; 0xa22 <__floatsisf+0x36>
 a1e:	60 ff       	sbrs	r22, 0
 a20:	1b c0       	rjmp	.+54     	; 0xa58 <__floatsisf+0x6c>
 a22:	6f 5f       	subi	r22, 0xFF	; 255
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	16 c0       	rjmp	.+44     	; 0xa58 <__floatsisf+0x6c>
 a2c:	88 23       	and	r24, r24
 a2e:	11 f0       	breq	.+4      	; 0xa34 <__floatsisf+0x48>
 a30:	96 e9       	ldi	r25, 0x96	; 150
 a32:	11 c0       	rjmp	.+34     	; 0xa56 <__floatsisf+0x6a>
 a34:	77 23       	and	r23, r23
 a36:	21 f0       	breq	.+8      	; 0xa40 <__floatsisf+0x54>
 a38:	9e e8       	ldi	r25, 0x8E	; 142
 a3a:	87 2f       	mov	r24, r23
 a3c:	76 2f       	mov	r23, r22
 a3e:	05 c0       	rjmp	.+10     	; 0xa4a <__floatsisf+0x5e>
 a40:	66 23       	and	r22, r22
 a42:	71 f0       	breq	.+28     	; 0xa60 <__floatsisf+0x74>
 a44:	96 e8       	ldi	r25, 0x86	; 134
 a46:	86 2f       	mov	r24, r22
 a48:	70 e0       	ldi	r23, 0x00	; 0
 a4a:	60 e0       	ldi	r22, 0x00	; 0
 a4c:	2a f0       	brmi	.+10     	; 0xa58 <__floatsisf+0x6c>
 a4e:	9a 95       	dec	r25
 a50:	66 0f       	add	r22, r22
 a52:	77 1f       	adc	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	da f7       	brpl	.-10     	; 0xa4e <__floatsisf+0x62>
 a58:	88 0f       	add	r24, r24
 a5a:	96 95       	lsr	r25
 a5c:	87 95       	ror	r24
 a5e:	97 f9       	bld	r25, 7
 a60:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000c48 <__fp_cmp>:
 c48:	99 0f       	add	r25, r25
 c4a:	00 08       	sbc	r0, r0
 c4c:	55 0f       	add	r21, r21
 c4e:	aa 0b       	sbc	r26, r26
 c50:	e0 e8       	ldi	r30, 0x80	; 128
 c52:	fe ef       	ldi	r31, 0xFE	; 254
 c54:	16 16       	cp	r1, r22
 c56:	17 06       	cpc	r1, r23
 c58:	e8 07       	cpc	r30, r24
 c5a:	f9 07       	cpc	r31, r25
 c5c:	c0 f0       	brcs	.+48     	; 0xc8e <__fp_cmp+0x46>
 c5e:	12 16       	cp	r1, r18
 c60:	13 06       	cpc	r1, r19
 c62:	e4 07       	cpc	r30, r20
 c64:	f5 07       	cpc	r31, r21
 c66:	98 f0       	brcs	.+38     	; 0xc8e <__fp_cmp+0x46>
 c68:	62 1b       	sub	r22, r18
 c6a:	73 0b       	sbc	r23, r19
 c6c:	84 0b       	sbc	r24, r20
 c6e:	95 0b       	sbc	r25, r21
 c70:	39 f4       	brne	.+14     	; 0xc80 <__fp_cmp+0x38>
 c72:	0a 26       	eor	r0, r26
 c74:	61 f0       	breq	.+24     	; 0xc8e <__fp_cmp+0x46>
 c76:	23 2b       	or	r18, r19
 c78:	24 2b       	or	r18, r20
 c7a:	25 2b       	or	r18, r21
 c7c:	21 f4       	brne	.+8      	; 0xc86 <__fp_cmp+0x3e>
 c7e:	08 95       	ret
 c80:	0a 26       	eor	r0, r26
 c82:	09 f4       	brne	.+2      	; 0xc86 <__fp_cmp+0x3e>
 c84:	a1 40       	sbci	r26, 0x01	; 1
 c86:	a6 95       	lsr	r26
 c88:	8f ef       	ldi	r24, 0xFF	; 255
 c8a:	81 1d       	adc	r24, r1
 c8c:	81 1d       	adc	r24, r1
 c8e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000fba <__fp_inf>:
 fba:	97 f9       	bld	r25, 7
 fbc:	9f 67       	ori	r25, 0x7F	; 127
 fbe:	80 e8       	ldi	r24, 0x80	; 128
 fc0:	70 e0       	ldi	r23, 0x00	; 0
 fc2:	60 e0       	ldi	r22, 0x00	; 0
 fc4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000fe8 <__fp_nan>:
 fe8:	9f ef       	ldi	r25, 0xFF	; 255
 fea:	80 ec       	ldi	r24, 0xC0	; 192
 fec:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000f76 <__fp_pscA>:
 f76:	00 24       	eor	r0, r0
 f78:	0a 94       	dec	r0
 f7a:	16 16       	cp	r1, r22
 f7c:	17 06       	cpc	r1, r23
 f7e:	18 06       	cpc	r1, r24
 f80:	09 06       	cpc	r0, r25
 f82:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000f84 <__fp_pscB>:
 f84:	00 24       	eor	r0, r0
 f86:	0a 94       	dec	r0
 f88:	12 16       	cp	r1, r18
 f8a:	13 06       	cpc	r1, r19
 f8c:	14 06       	cpc	r1, r20
 f8e:	05 06       	cpc	r0, r21
 f90:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e4a <__fp_round>:
 e4a:	09 2e       	mov	r0, r25
 e4c:	03 94       	inc	r0
 e4e:	00 0c       	add	r0, r0
 e50:	11 f4       	brne	.+4      	; 0xe56 <__fp_round+0xc>
 e52:	88 23       	and	r24, r24
 e54:	52 f0       	brmi	.+20     	; 0xe6a <__fp_round+0x20>
 e56:	bb 0f       	add	r27, r27
 e58:	40 f4       	brcc	.+16     	; 0xe6a <__fp_round+0x20>
 e5a:	bf 2b       	or	r27, r31
 e5c:	11 f4       	brne	.+4      	; 0xe62 <__fp_round+0x18>
 e5e:	60 ff       	sbrs	r22, 0
 e60:	04 c0       	rjmp	.+8      	; 0xe6a <__fp_round+0x20>
 e62:	6f 5f       	subi	r22, 0xFF	; 255
 e64:	7f 4f       	sbci	r23, 0xFF	; 255
 e66:	8f 4f       	sbci	r24, 0xFF	; 255
 e68:	9f 4f       	sbci	r25, 0xFF	; 255
 e6a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000cd6 <__fp_split3>:
 cd6:	57 fd       	sbrc	r21, 7
 cd8:	90 58       	subi	r25, 0x80	; 128
 cda:	44 0f       	add	r20, r20
 cdc:	55 1f       	adc	r21, r21
 cde:	59 f0       	breq	.+22     	; 0xcf6 <__fp_splitA+0x10>
 ce0:	5f 3f       	cpi	r21, 0xFF	; 255
 ce2:	71 f0       	breq	.+28     	; 0xd00 <__fp_splitA+0x1a>
 ce4:	47 95       	ror	r20

00000ce6 <__fp_splitA>:
 ce6:	88 0f       	add	r24, r24
 ce8:	97 fb       	bst	r25, 7
 cea:	99 1f       	adc	r25, r25
 cec:	61 f0       	breq	.+24     	; 0xd06 <__fp_splitA+0x20>
 cee:	9f 3f       	cpi	r25, 0xFF	; 255
 cf0:	79 f0       	breq	.+30     	; 0xd10 <__fp_splitA+0x2a>
 cf2:	87 95       	ror	r24
 cf4:	08 95       	ret
 cf6:	12 16       	cp	r1, r18
 cf8:	13 06       	cpc	r1, r19
 cfa:	14 06       	cpc	r1, r20
 cfc:	55 1f       	adc	r21, r21
 cfe:	f2 cf       	rjmp	.-28     	; 0xce4 <__fp_split3+0xe>
 d00:	46 95       	lsr	r20
 d02:	f1 df       	rcall	.-30     	; 0xce6 <__fp_splitA>
 d04:	08 c0       	rjmp	.+16     	; 0xd16 <__fp_splitA+0x30>
 d06:	16 16       	cp	r1, r22
 d08:	17 06       	cpc	r1, r23
 d0a:	18 06       	cpc	r1, r24
 d0c:	99 1f       	adc	r25, r25
 d0e:	f1 cf       	rjmp	.-30     	; 0xcf2 <__fp_splitA+0xc>
 d10:	86 95       	lsr	r24
 d12:	71 05       	cpc	r23, r1
 d14:	61 05       	cpc	r22, r1
 d16:	08 94       	sec
 d18:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000f92 <__fp_zero>:
 f92:	e8 94       	clt

00000f94 <__fp_szero>:
 f94:	bb 27       	eor	r27, r27
 f96:	66 27       	eor	r22, r22
 f98:	77 27       	eor	r23, r23
 f9a:	cb 01       	movw	r24, r22
 f9c:	97 f9       	bld	r25, 7
 f9e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000fd8 <__mulsf3>:
 fd8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__mulsf3x>
 fdc:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000007ca <__mulsf3x>:
 7ca:	0f c0       	rjmp	.+30     	; 0x7ea <__mulsf3x+0x20>
 7cc:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscA>
 7d0:	38 f0       	brcs	.+14     	; 0x7e0 <__mulsf3x+0x16>
 7d2:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscB>
 7d6:	20 f0       	brcs	.+8      	; 0x7e0 <__mulsf3x+0x16>
 7d8:	95 23       	and	r25, r21
 7da:	11 f0       	breq	.+4      	; 0x7e0 <__mulsf3x+0x16>
 7dc:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 7e0:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_nan>
 7e4:	11 24       	eor	r1, r1
 7e6:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>
 7ea:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_split3>
 7ee:	70 f3       	brcs	.-36     	; 0x7cc <__mulsf3x+0x2>

000007f0 <__mulsf3_pse>:
 7f0:	95 9f       	mul	r25, r21
 7f2:	c1 f3       	breq	.-16     	; 0x7e4 <__mulsf3x+0x1a>
 7f4:	95 0f       	add	r25, r21
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	55 1f       	adc	r21, r21
 7fa:	62 9f       	mul	r22, r18
 7fc:	f0 01       	movw	r30, r0
 7fe:	72 9f       	mul	r23, r18
 800:	bb 27       	eor	r27, r27
 802:	f0 0d       	add	r31, r0
 804:	b1 1d       	adc	r27, r1
 806:	63 9f       	mul	r22, r19
 808:	aa 27       	eor	r26, r26
 80a:	f0 0d       	add	r31, r0
 80c:	b1 1d       	adc	r27, r1
 80e:	aa 1f       	adc	r26, r26
 810:	64 9f       	mul	r22, r20
 812:	66 27       	eor	r22, r22
 814:	b0 0d       	add	r27, r0
 816:	a1 1d       	adc	r26, r1
 818:	66 1f       	adc	r22, r22
 81a:	82 9f       	mul	r24, r18
 81c:	22 27       	eor	r18, r18
 81e:	b0 0d       	add	r27, r0
 820:	a1 1d       	adc	r26, r1
 822:	62 1f       	adc	r22, r18
 824:	73 9f       	mul	r23, r19
 826:	b0 0d       	add	r27, r0
 828:	a1 1d       	adc	r26, r1
 82a:	62 1f       	adc	r22, r18
 82c:	83 9f       	mul	r24, r19
 82e:	a0 0d       	add	r26, r0
 830:	61 1d       	adc	r22, r1
 832:	22 1f       	adc	r18, r18
 834:	74 9f       	mul	r23, r20
 836:	33 27       	eor	r19, r19
 838:	a0 0d       	add	r26, r0
 83a:	61 1d       	adc	r22, r1
 83c:	23 1f       	adc	r18, r19
 83e:	84 9f       	mul	r24, r20
 840:	60 0d       	add	r22, r0
 842:	21 1d       	adc	r18, r1
 844:	82 2f       	mov	r24, r18
 846:	76 2f       	mov	r23, r22
 848:	6a 2f       	mov	r22, r26
 84a:	11 24       	eor	r1, r1
 84c:	9f 57       	subi	r25, 0x7F	; 127
 84e:	50 40       	sbci	r21, 0x00	; 0
 850:	9a f0       	brmi	.+38     	; 0x878 <__mulsf3_pse+0x88>
 852:	f1 f0       	breq	.+60     	; 0x890 <__mulsf3_pse+0xa0>
 854:	88 23       	and	r24, r24
 856:	4a f0       	brmi	.+18     	; 0x86a <__mulsf3_pse+0x7a>
 858:	ee 0f       	add	r30, r30
 85a:	ff 1f       	adc	r31, r31
 85c:	bb 1f       	adc	r27, r27
 85e:	66 1f       	adc	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	91 50       	subi	r25, 0x01	; 1
 866:	50 40       	sbci	r21, 0x00	; 0
 868:	a9 f7       	brne	.-22     	; 0x854 <__mulsf3_pse+0x64>
 86a:	9e 3f       	cpi	r25, 0xFE	; 254
 86c:	51 05       	cpc	r21, r1
 86e:	80 f0       	brcs	.+32     	; 0x890 <__mulsf3_pse+0xa0>
 870:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 874:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_szero>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	e4 f3       	brlt	.-8      	; 0x874 <__mulsf3_pse+0x84>
 87c:	98 3e       	cpi	r25, 0xE8	; 232
 87e:	d4 f3       	brlt	.-12     	; 0x874 <__mulsf3_pse+0x84>
 880:	86 95       	lsr	r24
 882:	77 95       	ror	r23
 884:	67 95       	ror	r22
 886:	b7 95       	ror	r27
 888:	f7 95       	ror	r31
 88a:	e7 95       	ror	r30
 88c:	9f 5f       	subi	r25, 0xFF	; 255
 88e:	c1 f7       	brne	.-16     	; 0x880 <__mulsf3_pse+0x90>
 890:	fe 2b       	or	r31, r30
 892:	88 0f       	add	r24, r24
 894:	91 1d       	adc	r25, r1
 896:	96 95       	lsr	r25
 898:	87 95       	ror	r24
 89a:	97 f9       	bld	r25, 7
 89c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000f58 <sin>:
 f58:	9f 93       	push	r25
 f5a:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_rempio2>
 f5e:	0f 90       	pop	r0
 f60:	07 fc       	sbrc	r0, 7
 f62:	ee 5f       	subi	r30, 0xFE	; 254
 f64:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_sinus>

Disassembly of section .text.avrlibc.fplib:

00000ba4 <__fp_rempio2>:
 ba4:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_splitA>
 ba8:	10 f4       	brcc	.+4      	; 0xbae <__fp_rempio2+0xa>
 baa:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_nan>
 bae:	e8 94       	clt
 bb0:	e0 e0       	ldi	r30, 0x00	; 0
 bb2:	bb 27       	eor	r27, r27
 bb4:	9f 57       	subi	r25, 0x7F	; 127
 bb6:	f0 f0       	brcs	.+60     	; 0xbf4 <__fp_rempio2+0x50>
 bb8:	2a ed       	ldi	r18, 0xDA	; 218
 bba:	3f e0       	ldi	r19, 0x0F	; 15
 bbc:	49 ec       	ldi	r20, 0xC9	; 201
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <__fp_rempio2+0x28>
 bc0:	ee 0f       	add	r30, r30
 bc2:	bb 0f       	add	r27, r27
 bc4:	66 1f       	adc	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	28 f0       	brcs	.+10     	; 0xbd6 <__fp_rempio2+0x32>
 bcc:	b2 3a       	cpi	r27, 0xA2	; 162
 bce:	62 07       	cpc	r22, r18
 bd0:	73 07       	cpc	r23, r19
 bd2:	84 07       	cpc	r24, r20
 bd4:	28 f0       	brcs	.+10     	; 0xbe0 <__fp_rempio2+0x3c>
 bd6:	b2 5a       	subi	r27, 0xA2	; 162
 bd8:	62 0b       	sbc	r22, r18
 bda:	73 0b       	sbc	r23, r19
 bdc:	84 0b       	sbc	r24, r20
 bde:	e3 95       	inc	r30
 be0:	9a 95       	dec	r25
 be2:	72 f7       	brpl	.-36     	; 0xbc0 <__fp_rempio2+0x1c>
 be4:	80 38       	cpi	r24, 0x80	; 128
 be6:	30 f4       	brcc	.+12     	; 0xbf4 <__fp_rempio2+0x50>
 be8:	9a 95       	dec	r25
 bea:	bb 0f       	add	r27, r27
 bec:	66 1f       	adc	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	d2 f7       	brpl	.-12     	; 0xbe8 <__fp_rempio2+0x44>
 bf4:	90 48       	sbci	r25, 0x80	; 128
 bf6:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__fp_mpack_finite>

Disassembly of section .text.avrlibc.fplib:

00000dd6 <__fp_sinus>:
 dd6:	ef 93       	push	r30
 dd8:	e0 ff       	sbrs	r30, 0
 dda:	07 c0       	rjmp	.+14     	; 0xdea <__fp_sinus+0x14>
 ddc:	a2 ea       	ldi	r26, 0xA2	; 162
 dde:	2a ed       	ldi	r18, 0xDA	; 218
 de0:	3f e0       	ldi	r19, 0x0F	; 15
 de2:	49 ec       	ldi	r20, 0xC9	; 201
 de4:	5f eb       	ldi	r21, 0xBF	; 191
 de6:	0e 94 4f 04 	call	0x89e	; 0x89e <__addsf3x>
 dea:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_round>
 dee:	0f 90       	pop	r0
 df0:	03 94       	inc	r0
 df2:	01 fc       	sbrc	r0, 1
 df4:	90 58       	subi	r25, 0x80	; 128
 df6:	e4 e5       	ldi	r30, 0x54	; 84
 df8:	f0 e0       	ldi	r31, 0x00	; 0
 dfa:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_powsodd>

Disassembly of section .text.avrlibc.fplib:

00000ee2 <__fp_mpack>:
 ee2:	9f 3f       	cpi	r25, 0xFF	; 255
 ee4:	31 f0       	breq	.+12     	; 0xef2 <__fp_mpack_finite+0xc>

00000ee6 <__fp_mpack_finite>:
 ee6:	91 50       	subi	r25, 0x01	; 1
 ee8:	20 f4       	brcc	.+8      	; 0xef2 <__fp_mpack_finite+0xc>
 eea:	87 95       	ror	r24
 eec:	77 95       	ror	r23
 eee:	67 95       	ror	r22
 ef0:	b7 95       	ror	r27
 ef2:	88 0f       	add	r24, r24
 ef4:	91 1d       	adc	r25, r1
 ef6:	96 95       	lsr	r25
 ef8:	87 95       	ror	r24
 efa:	97 f9       	bld	r25, 7
 efc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000dfe <__fp_powsodd>:
 dfe:	9f 93       	push	r25
 e00:	8f 93       	push	r24
 e02:	7f 93       	push	r23
 e04:	6f 93       	push	r22
 e06:	ff 93       	push	r31
 e08:	ef 93       	push	r30
 e0a:	9b 01       	movw	r18, r22
 e0c:	ac 01       	movw	r20, r24
 e0e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
 e12:	ef 91       	pop	r30
 e14:	ff 91       	pop	r31
 e16:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_powser>
 e1a:	2f 91       	pop	r18
 e1c:	3f 91       	pop	r19
 e1e:	4f 91       	pop	r20
 e20:	5f 91       	pop	r21
 e22:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__mulsf3>

Disassembly of section .text.avrlibc.fplib:

00000bfa <__fp_powser>:
 bfa:	df 93       	push	r29
 bfc:	cf 93       	push	r28
 bfe:	1f 93       	push	r17
 c00:	0f 93       	push	r16
 c02:	ff 92       	push	r15
 c04:	ef 92       	push	r14
 c06:	df 92       	push	r13
 c08:	7b 01       	movw	r14, r22
 c0a:	8c 01       	movw	r16, r24
 c0c:	68 94       	set
 c0e:	06 c0       	rjmp	.+12     	; 0xc1c <__fp_powser+0x22>
 c10:	da 2e       	mov	r13, r26
 c12:	ef 01       	movw	r28, r30
 c14:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__mulsf3x>
 c18:	fe 01       	movw	r30, r28
 c1a:	e8 94       	clt
 c1c:	a5 91       	lpm	r26, Z+
 c1e:	25 91       	lpm	r18, Z+
 c20:	35 91       	lpm	r19, Z+
 c22:	45 91       	lpm	r20, Z+
 c24:	55 91       	lpm	r21, Z+
 c26:	a6 f3       	brts	.-24     	; 0xc10 <__fp_powser+0x16>
 c28:	ef 01       	movw	r28, r30
 c2a:	0e 94 4f 04 	call	0x89e	; 0x89e <__addsf3x>
 c2e:	fe 01       	movw	r30, r28
 c30:	97 01       	movw	r18, r14
 c32:	a8 01       	movw	r20, r16
 c34:	da 94       	dec	r13
 c36:	69 f7       	brne	.-38     	; 0xc12 <__fp_powser+0x18>
 c38:	df 90       	pop	r13
 c3a:	ef 90       	pop	r14
 c3c:	ff 90       	pop	r15
 c3e:	0f 91       	pop	r16
 c40:	1f 91       	pop	r17
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	08 95       	ret

Disassembly of section .text.avrlibc:

00000fe0 <atoi>:
 fe0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <atol>
 fe4:	cb 01       	movw	r24, r22
 fe6:	08 95       	ret

Disassembly of section .text.avrlibc:

00000fa0 <atol>:
 fa0:	2a e0       	ldi	r18, 0x0A	; 10
 fa2:	30 e0       	ldi	r19, 0x00	; 0
 fa4:	40 e0       	ldi	r20, 0x00	; 0
 fa6:	50 e0       	ldi	r21, 0x00	; 0
 fa8:	0e 94 74 00 	call	0xe8	; 0xe8 <strtol>
 fac:	08 95       	ret

Disassembly of section .text.avrlibc:

000000e8 <strtol>:
  e8:	2f 92       	push	r2
  ea:	3f 92       	push	r3
  ec:	4f 92       	push	r4
  ee:	5f 92       	push	r5
  f0:	6f 92       	push	r6
  f2:	7f 92       	push	r7
  f4:	8f 92       	push	r8
  f6:	af 92       	push	r10
  f8:	bf 92       	push	r11
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <strtol+0x22>
 10a:	00 d0       	rcall	.+0      	; 0x10c <strtol+0x24>
 10c:	00 d0       	rcall	.+0      	; 0x10e <strtol+0x26>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	3b 01       	movw	r6, r22
 114:	88 2e       	mov	r8, r24
 116:	5a 01       	movw	r10, r20
 118:	19 01       	movw	r2, r18
 11a:	41 15       	cp	r20, r1
 11c:	51 05       	cpc	r21, r1
 11e:	21 f0       	breq	.+8      	; 0x128 <strtol+0x40>
 120:	fa 01       	movw	r30, r20
 122:	60 83       	st	Z, r22
 124:	71 83       	std	Z+1, r23	; 0x01
 126:	82 83       	std	Z+2, r24	; 0x02
 128:	21 14       	cp	r2, r1
 12a:	31 04       	cpc	r3, r1
 12c:	29 f0       	breq	.+10     	; 0x138 <strtol+0x50>
 12e:	c1 01       	movw	r24, r2
 130:	02 97       	sbiw	r24, 0x02	; 2
 132:	83 97       	sbiw	r24, 0x23	; 35
 134:	08 f0       	brcs	.+2      	; 0x138 <strtol+0x50>
 136:	1a c1       	rjmp	.+564    	; 0x36c <__EEPROM_REGION_LENGTH__+0x16c>
 138:	e8 2c       	mov	r14, r8
 13a:	63 01       	movw	r12, r6
 13c:	ff ef       	ldi	r31, 0xFF	; 255
 13e:	cf 1a       	sub	r12, r31
 140:	df 0a       	sbc	r13, r31
 142:	ef 0a       	sbc	r14, r31
 144:	f3 01       	movw	r30, r6
 146:	14 91       	lpm	r17, Z
 148:	87 fc       	sbrc	r8, 7
 14a:	10 81       	ld	r17, Z
 14c:	81 2f       	mov	r24, r17
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 a3 07 	call	0xf46	; 0xf46 <isspace>
 154:	4c 2d       	mov	r20, r12
 156:	3d 2d       	mov	r19, r13
 158:	2e 2d       	mov	r18, r14
 15a:	89 2b       	or	r24, r25
 15c:	19 f0       	breq	.+6      	; 0x164 <strtol+0x7c>
 15e:	36 01       	movw	r6, r12
 160:	8e 2c       	mov	r8, r14
 162:	ea cf       	rjmp	.-44     	; 0x138 <strtol+0x50>
 164:	1d 32       	cpi	r17, 0x2D	; 45
 166:	69 f4       	brne	.+26     	; 0x182 <strtol+0x9a>
 168:	e8 2c       	mov	r14, r8
 16a:	63 01       	movw	r12, r6
 16c:	52 e0       	ldi	r21, 0x02	; 2
 16e:	c5 0e       	add	r12, r21
 170:	d1 1c       	adc	r13, r1
 172:	e1 1c       	adc	r14, r1
 174:	e4 2f       	mov	r30, r20
 176:	f3 2f       	mov	r31, r19
 178:	14 91       	lpm	r17, Z
 17a:	27 fd       	sbrc	r18, 7
 17c:	10 81       	ld	r17, Z
 17e:	01 e0       	ldi	r16, 0x01	; 1
 180:	0e c0       	rjmp	.+28     	; 0x19e <strtol+0xb6>
 182:	1b 32       	cpi	r17, 0x2B	; 43
 184:	59 f4       	brne	.+22     	; 0x19c <strtol+0xb4>
 186:	e8 2c       	mov	r14, r8
 188:	63 01       	movw	r12, r6
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	c8 0e       	add	r12, r24
 18e:	d1 1c       	adc	r13, r1
 190:	e1 1c       	adc	r14, r1
 192:	e4 2f       	mov	r30, r20
 194:	f3 2f       	mov	r31, r19
 196:	14 91       	lpm	r17, Z
 198:	27 fd       	sbrc	r18, 7
 19a:	10 81       	ld	r17, Z
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	21 14       	cp	r2, r1
 1a0:	31 04       	cpc	r3, r1
 1a2:	09 f1       	breq	.+66     	; 0x1e6 <strtol+0xfe>
 1a4:	90 e1       	ldi	r25, 0x10	; 16
 1a6:	29 16       	cp	r2, r25
 1a8:	31 04       	cpc	r3, r1
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <strtol+0xce>
 1ac:	3f c0       	rjmp	.+126    	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 1ae:	10 e3       	ldi	r17, 0x30	; 48
 1b0:	21 14       	cp	r2, r1
 1b2:	31 04       	cpc	r3, r1
 1b4:	21 f1       	breq	.+72     	; 0x1fe <strtol+0x116>
 1b6:	f8 e0       	ldi	r31, 0x08	; 8
 1b8:	2f 16       	cp	r2, r31
 1ba:	31 04       	cpc	r3, r1
 1bc:	01 f1       	breq	.+64     	; 0x1fe <strtol+0x116>
 1be:	54 f4       	brge	.+20     	; 0x1d4 <strtol+0xec>
 1c0:	32 e0       	ldi	r19, 0x02	; 2
 1c2:	23 16       	cp	r2, r19
 1c4:	31 04       	cpc	r3, r1
 1c6:	21 f5       	brne	.+72     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 1c8:	41 2c       	mov	r4, r1
 1ca:	51 2c       	mov	r5, r1
 1cc:	61 2c       	mov	r6, r1
 1ce:	50 e4       	ldi	r21, 0x40	; 64
 1d0:	75 2e       	mov	r7, r21
 1d2:	4b c0       	rjmp	.+150    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	24 16       	cp	r2, r20
 1d8:	31 04       	cpc	r3, r1
 1da:	39 f0       	breq	.+14     	; 0x1ea <strtol+0x102>
 1dc:	50 e1       	ldi	r21, 0x10	; 16
 1de:	25 16       	cp	r2, r21
 1e0:	31 04       	cpc	r3, r1
 1e2:	b1 f4       	brne	.+44     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 1e4:	3d c0       	rjmp	.+122    	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 1e6:	10 33       	cpi	r17, 0x30	; 48
 1e8:	19 f1       	breq	.+70     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 1ea:	3a e0       	ldi	r19, 0x0A	; 10
 1ec:	23 2e       	mov	r2, r19
 1ee:	31 2c       	mov	r3, r1
 1f0:	4c ec       	ldi	r20, 0xCC	; 204
 1f2:	44 2e       	mov	r4, r20
 1f4:	54 2c       	mov	r5, r4
 1f6:	64 2c       	mov	r6, r4
 1f8:	4c e0       	ldi	r20, 0x0C	; 12
 1fa:	74 2e       	mov	r7, r20
 1fc:	36 c0       	rjmp	.+108    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 1fe:	98 e0       	ldi	r25, 0x08	; 8
 200:	29 2e       	mov	r2, r25
 202:	31 2c       	mov	r3, r1
 204:	41 2c       	mov	r4, r1
 206:	51 2c       	mov	r5, r1
 208:	61 2c       	mov	r6, r1
 20a:	20 e1       	ldi	r18, 0x10	; 16
 20c:	72 2e       	mov	r7, r18
 20e:	2d c0       	rjmp	.+90     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e8       	ldi	r25, 0x80	; 128
 218:	91 01       	movw	r18, r2
 21a:	03 2c       	mov	r0, r3
 21c:	00 0c       	add	r0, r0
 21e:	44 0b       	sbc	r20, r20
 220:	55 0b       	sbc	r21, r21
 222:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__udivmodsi4>
 226:	29 01       	movw	r4, r18
 228:	3a 01       	movw	r6, r20
 22a:	1f c0       	rjmp	.+62     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 22c:	10 33       	cpi	r17, 0x30	; 48
 22e:	c1 f4       	brne	.+48     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 230:	f6 01       	movw	r30, r12
 232:	84 91       	lpm	r24, Z
 234:	e7 fc       	sbrc	r14, 7
 236:	80 81       	ld	r24, Z
 238:	8f 7d       	andi	r24, 0xDF	; 223
 23a:	88 35       	cpi	r24, 0x58	; 88
 23c:	09 f0       	breq	.+2      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 23e:	b7 cf       	rjmp	.-146    	; 0x1ae <strtol+0xc6>
 240:	ae 2d       	mov	r26, r14
 242:	c6 01       	movw	r24, r12
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	a1 1d       	adc	r26, r1
 248:	fc 01       	movw	r30, r24
 24a:	14 91       	lpm	r17, Z
 24c:	a7 fd       	sbrc	r26, 7
 24e:	10 81       	ld	r17, Z
 250:	e2 e0       	ldi	r30, 0x02	; 2
 252:	ce 0e       	add	r12, r30
 254:	d1 1c       	adc	r13, r1
 256:	e1 1c       	adc	r14, r1
 258:	02 60       	ori	r16, 0x02	; 2
 25a:	60 e1       	ldi	r22, 0x10	; 16
 25c:	26 2e       	mov	r2, r22
 25e:	31 2c       	mov	r3, r1
 260:	41 2c       	mov	r4, r1
 262:	51 2c       	mov	r5, r1
 264:	61 2c       	mov	r6, r1
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	78 2e       	mov	r7, r24
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	cb 01       	movw	r24, r22
 272:	91 01       	movw	r18, r2
 274:	03 2c       	mov	r0, r3
 276:	00 0c       	add	r0, r0
 278:	44 0b       	sbc	r20, r20
 27a:	55 0b       	sbc	r21, r21
 27c:	29 83       	std	Y+1, r18	; 0x01
 27e:	3a 83       	std	Y+2, r19	; 0x02
 280:	4b 83       	std	Y+3, r20	; 0x03
 282:	5c 83       	std	Y+4, r21	; 0x04
 284:	e0 ed       	ldi	r30, 0xD0	; 208
 286:	e1 0f       	add	r30, r17
 288:	ea 30       	cpi	r30, 0x0A	; 10
 28a:	60 f0       	brcs	.+24     	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
 28c:	2f eb       	ldi	r18, 0xBF	; 191
 28e:	21 0f       	add	r18, r17
 290:	2a 31       	cpi	r18, 0x1A	; 26
 292:	10 f4       	brcc	.+4      	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
 294:	e9 ec       	ldi	r30, 0xC9	; 201
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
 298:	2f e9       	ldi	r18, 0x9F	; 159
 29a:	21 0f       	add	r18, r17
 29c:	2a 31       	cpi	r18, 0x1A	; 26
 29e:	50 f5       	brcc	.+84     	; 0x2f4 <__EEPROM_REGION_LENGTH__+0xf4>
 2a0:	e9 ea       	ldi	r30, 0xA9	; 169
 2a2:	e1 0f       	add	r30, r17
 2a4:	2e 2f       	mov	r18, r30
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	22 15       	cp	r18, r2
 2aa:	33 05       	cpc	r19, r3
 2ac:	1c f5       	brge	.+70     	; 0x2f4 <__EEPROM_REGION_LENGTH__+0xf4>
 2ae:	a7 fd       	sbrc	r26, 7
 2b0:	18 c0       	rjmp	.+48     	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
 2b2:	46 16       	cp	r4, r22
 2b4:	57 06       	cpc	r5, r23
 2b6:	68 06       	cpc	r6, r24
 2b8:	79 06       	cpc	r7, r25
 2ba:	80 f0       	brcs	.+32     	; 0x2dc <__EEPROM_REGION_LENGTH__+0xdc>
 2bc:	29 81       	ldd	r18, Y+1	; 0x01
 2be:	3a 81       	ldd	r19, Y+2	; 0x02
 2c0:	4b 81       	ldd	r20, Y+3	; 0x03
 2c2:	5c 81       	ldd	r21, Y+4	; 0x04
 2c4:	0e 94 36 07 	call	0xe6c	; 0xe6c <__mulsi3>
 2c8:	6e 0f       	add	r22, r30
 2ca:	71 1d       	adc	r23, r1
 2cc:	81 1d       	adc	r24, r1
 2ce:	91 1d       	adc	r25, r1
 2d0:	61 30       	cpi	r22, 0x01	; 1
 2d2:	71 05       	cpc	r23, r1
 2d4:	81 05       	cpc	r24, r1
 2d6:	30 e8       	ldi	r19, 0x80	; 128
 2d8:	93 07       	cpc	r25, r19
 2da:	10 f0       	brcs	.+4      	; 0x2e0 <__EEPROM_REGION_LENGTH__+0xe0>
 2dc:	af ef       	ldi	r26, 0xFF	; 255
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
 2e0:	a1 e0       	ldi	r26, 0x01	; 1
 2e2:	f6 01       	movw	r30, r12
 2e4:	14 91       	lpm	r17, Z
 2e6:	e7 fc       	sbrc	r14, 7
 2e8:	10 81       	ld	r17, Z
 2ea:	4f ef       	ldi	r20, 0xFF	; 255
 2ec:	c4 1a       	sub	r12, r20
 2ee:	d4 0a       	sbc	r13, r20
 2f0:	e4 0a       	sbc	r14, r20
 2f2:	c8 cf       	rjmp	.-112    	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
 2f4:	20 2f       	mov	r18, r16
 2f6:	21 70       	andi	r18, 0x01	; 1
 2f8:	a1 14       	cp	r10, r1
 2fa:	b1 04       	cpc	r11, r1
 2fc:	b1 f0       	breq	.+44     	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
 2fe:	aa 23       	and	r26, r26
 300:	49 f0       	breq	.+18     	; 0x314 <__EEPROM_REGION_LENGTH__+0x114>
 302:	51 e0       	ldi	r21, 0x01	; 1
 304:	c5 1a       	sub	r12, r21
 306:	d1 08       	sbc	r13, r1
 308:	e1 08       	sbc	r14, r1
 30a:	f5 01       	movw	r30, r10
 30c:	c0 82       	st	Z, r12
 30e:	d1 82       	std	Z+1, r13	; 0x01
 310:	e2 82       	std	Z+2, r14	; 0x02
 312:	0b c0       	rjmp	.+22     	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
 314:	01 ff       	sbrs	r16, 1
 316:	1d c0       	rjmp	.+58     	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
 318:	f2 e0       	ldi	r31, 0x02	; 2
 31a:	cf 1a       	sub	r12, r31
 31c:	d1 08       	sbc	r13, r1
 31e:	e1 08       	sbc	r14, r1
 320:	f5 01       	movw	r30, r10
 322:	c0 82       	st	Z, r12
 324:	d1 82       	std	Z+1, r13	; 0x01
 326:	e2 82       	std	Z+2, r14	; 0x02
 328:	14 c0       	rjmp	.+40     	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
 32a:	a7 ff       	sbrs	r26, 7
 32c:	12 c0       	rjmp	.+36     	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
 32e:	22 23       	and	r18, r18
 330:	29 f0       	breq	.+10     	; 0x33c <__EEPROM_REGION_LENGTH__+0x13c>
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e8       	ldi	r25, 0x80	; 128
 33a:	04 c0       	rjmp	.+8      	; 0x344 <__EEPROM_REGION_LENGTH__+0x144>
 33c:	6f ef       	ldi	r22, 0xFF	; 255
 33e:	7f ef       	ldi	r23, 0xFF	; 255
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	9f e7       	ldi	r25, 0x7F	; 127
 344:	22 e2       	ldi	r18, 0x22	; 34
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 34c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 350:	09 c0       	rjmp	.+18     	; 0x364 <__EEPROM_REGION_LENGTH__+0x164>
 352:	22 23       	and	r18, r18
 354:	81 f0       	breq	.+32     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
 356:	90 95       	com	r25
 358:	80 95       	com	r24
 35a:	70 95       	com	r23
 35c:	61 95       	neg	r22
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	8f 4f       	sbci	r24, 0xFF	; 255
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	46 2f       	mov	r20, r22
 366:	37 2f       	mov	r19, r23
 368:	28 2f       	mov	r18, r24
 36a:	12 c0       	rjmp	.+36     	; 0x390 <__EEPROM_REGION_LENGTH__+0x190>
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0d c0       	rjmp	.+26     	; 0x390 <__EEPROM_REGION_LENGTH__+0x190>
 376:	97 ff       	sbrs	r25, 7
 378:	f5 cf       	rjmp	.-22     	; 0x364 <__EEPROM_REGION_LENGTH__+0x164>
 37a:	82 e2       	ldi	r24, 0x22	; 34
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 382:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 386:	6f ef       	ldi	r22, 0xFF	; 255
 388:	7f ef       	ldi	r23, 0xFF	; 255
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	9f e7       	ldi	r25, 0x7F	; 127
 38e:	ea cf       	rjmp	.-44     	; 0x364 <__EEPROM_REGION_LENGTH__+0x164>
 390:	64 2f       	mov	r22, r20
 392:	73 2f       	mov	r23, r19
 394:	82 2f       	mov	r24, r18
 396:	26 96       	adiw	r28, 0x06	; 6
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	bf 90       	pop	r11
 3b2:	af 90       	pop	r10
 3b4:	8f 90       	pop	r8
 3b6:	7f 90       	pop	r7
 3b8:	6f 90       	pop	r6
 3ba:	5f 90       	pop	r5
 3bc:	4f 90       	pop	r4
 3be:	3f 90       	pop	r3
 3c0:	2f 90       	pop	r2
 3c2:	08 95       	ret

Disassembly of section .text.avrlibc:

00000f46 <isspace>:
 f46:	91 11       	cpse	r25, r1
 f48:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__ctype_isfalse>
 f4c:	80 32       	cpi	r24, 0x20	; 32
 f4e:	19 f0       	breq	.+6      	; 0xf56 <isspace+0x10>
 f50:	89 50       	subi	r24, 0x09	; 9
 f52:	85 50       	subi	r24, 0x05	; 5
 f54:	c8 f7       	brcc	.-14     	; 0xf48 <isspace+0x2>
 f56:	08 95       	ret

Disassembly of section .text.avrlibc:

00000fee <__ctype_isfalse>:
 fee:	99 27       	eor	r25, r25
 ff0:	88 27       	eor	r24, r24

00000ff2 <__ctype_istrue>:
 ff2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000e6c <__mulsi3>:
 e6c:	db 01       	movw	r26, r22
 e6e:	8f 93       	push	r24
 e70:	9f 93       	push	r25
 e72:	0e 94 98 07 	call	0xf30	; 0xf30 <__muluhisi3>
 e76:	bf 91       	pop	r27
 e78:	af 91       	pop	r26
 e7a:	a2 9f       	mul	r26, r18
 e7c:	80 0d       	add	r24, r0
 e7e:	91 1d       	adc	r25, r1
 e80:	a3 9f       	mul	r26, r19
 e82:	90 0d       	add	r25, r0
 e84:	b2 9f       	mul	r27, r18
 e86:	90 0d       	add	r25, r0
 e88:	11 24       	eor	r1, r1
 e8a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000d1a <__udivmodsi4>:
 d1a:	a1 e2       	ldi	r26, 0x21	; 33
 d1c:	1a 2e       	mov	r1, r26
 d1e:	aa 1b       	sub	r26, r26
 d20:	bb 1b       	sub	r27, r27
 d22:	fd 01       	movw	r30, r26
 d24:	0d c0       	rjmp	.+26     	; 0xd40 <__udivmodsi4_ep>

00000d26 <__udivmodsi4_loop>:
 d26:	aa 1f       	adc	r26, r26
 d28:	bb 1f       	adc	r27, r27
 d2a:	ee 1f       	adc	r30, r30
 d2c:	ff 1f       	adc	r31, r31
 d2e:	a2 17       	cp	r26, r18
 d30:	b3 07       	cpc	r27, r19
 d32:	e4 07       	cpc	r30, r20
 d34:	f5 07       	cpc	r31, r21
 d36:	20 f0       	brcs	.+8      	; 0xd40 <__udivmodsi4_ep>
 d38:	a2 1b       	sub	r26, r18
 d3a:	b3 0b       	sbc	r27, r19
 d3c:	e4 0b       	sbc	r30, r20
 d3e:	f5 0b       	sbc	r31, r21

00000d40 <__udivmodsi4_ep>:
 d40:	66 1f       	adc	r22, r22
 d42:	77 1f       	adc	r23, r23
 d44:	88 1f       	adc	r24, r24
 d46:	99 1f       	adc	r25, r25
 d48:	1a 94       	dec	r1
 d4a:	69 f7       	brne	.-38     	; 0xd26 <__udivmodsi4_loop>
 d4c:	60 95       	com	r22
 d4e:	70 95       	com	r23
 d50:	80 95       	com	r24
 d52:	90 95       	com	r25
 d54:	9b 01       	movw	r18, r22
 d56:	ac 01       	movw	r20, r24
 d58:	bd 01       	movw	r22, r26
 d5a:	cf 01       	movw	r24, r30
 d5c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000f30 <__muluhisi3>:
 f30:	0e 94 46 07 	call	0xe8c	; 0xe8c <__umulhisi3>
 f34:	a5 9f       	mul	r26, r21
 f36:	90 0d       	add	r25, r0
 f38:	b4 9f       	mul	r27, r20
 f3a:	90 0d       	add	r25, r0
 f3c:	a4 9f       	mul	r26, r20
 f3e:	80 0d       	add	r24, r0
 f40:	91 1d       	adc	r25, r1
 f42:	11 24       	eor	r1, r1
 f44:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000e8c <__umulhisi3>:
 e8c:	a2 9f       	mul	r26, r18
 e8e:	b0 01       	movw	r22, r0
 e90:	b3 9f       	mul	r27, r19
 e92:	c0 01       	movw	r24, r0
 e94:	a3 9f       	mul	r26, r19
 e96:	70 0d       	add	r23, r0
 e98:	81 1d       	adc	r24, r1
 e9a:	11 24       	eor	r1, r1
 e9c:	91 1d       	adc	r25, r1
 e9e:	b2 9f       	mul	r27, r18
 ea0:	70 0d       	add	r23, r0
 ea2:	81 1d       	adc	r24, r1
 ea4:	11 24       	eor	r1, r1
 ea6:	91 1d       	adc	r25, r1
 ea8:	08 95       	ret
